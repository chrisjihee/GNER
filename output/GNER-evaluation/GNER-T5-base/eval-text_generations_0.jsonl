{"id": "7", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "7", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: programming language, researcher, location, organization, metric, conference, field, person, algorithm, product, country, task, university and O.\nSentence: Since the Google acquisition , the company has notched up a number of significant achievements , perhaps the most notable being the creation of AlphaGo , a program that defeated world champion Lee Sedol at the complex game of Go .", "prompt_labels": "Since(O) the(O) Google(B-organization) acquisition(O) ,(O) the(O) company(O) has(O) notched(O) up(O) a(O) number(O) of(O) significant(O) achievements(O) ,(O) perhaps(O) the(O) most(O) notable(O) being(O) the(O) creation(O) of(O) AlphaGo(B-product) ,(O) a(O) program(O) that(O) defeated(O) world(O) champion(O) Lee(B-person) Sedol(I-person) at(O) the(O) complex(O) game(O) of(O) Go(O) .(O)", "words": ["Since", "the", "Google", "acquisition", ",", "the", "company", "has", "notched", "up", "a", "number", "of", "significant", "achievements", ",", "perhaps", "the", "most", "notable", "being", "the", "creation", "of", "AlphaGo", ",", "a", "program", "that", "defeated", "world", "champion", "Lee", "Sedol", "at", "the", "complex", "game", "of", "Go", "."], "labels": ["O", "O", "B-organization", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-product", "O", "O", "O", "O", "O", "O", "O", "B-person", "I-person", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["programming language", "researcher", "location", "organization", "metric", "conference", "field", "person", "algorithm", "product", "country", "task", "university"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 6020, 1612, 6, 18658, 6, 1128, 6, 1470, 6, 3, 7959, 6, 2542, 6, 1057, 6, 568, 6, 12628, 6, 556, 6, 684, 6, 2491, 6, 3819, 11, 411, 5, 4892, 17, 1433, 10, 1541, 8, 1163, 6566, 3, 6, 8, 349, 65, 59, 4513, 95, 3, 9, 381, 13, 1516, 14665, 3, 6, 2361, 8, 167, 14538, 271, 8, 3409, 13, 12503, 6221, 3, 6, 3, 9, 478, 24, 17025, 296, 6336, 5531, 679, 26, 32, 40, 44, 8, 1561, 467, 13, 1263, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.428785, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Since(O) the(O) Google(B-organization) acquisition(O),(O) the(O) company(O) has(O) notched(O) up(O) a(O) number(O) of(O) significant(O) achievements(O),(O) perhaps(O) the(O) most(O) notable(O) being(O) the(O) creation(O) of(O) AlphaGo(B-product),(O) a(O) program(O) that(O) defeated(O) world(O) champion(O) Lee(B-person) Sedol(I-person) at(O) the(O) complex(O) game(O) of(O) Go(B-product).(O)"}
{"id": "31", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "31", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: person, product, metric, programming language, task, researcher, organization, conference, university, field, country, location, algorithm and O.\nSentence: The Arduino integrated development environment ( IDE ) is a cross-platform application ( for Windows , macOS , and Linux ) that is written in the programming language Java .", "prompt_labels": "The(O) Arduino(B-product) integrated(O) development(O) environment(O) ((O) IDE(O) )(O) is(O) a(O) cross-platform(O) application(O) ((O) for(O) Windows(B-product) ,(O) macOS(B-product) ,(O) and(O) Linux(B-product) )(O) that(O) is(O) written(O) in(O) the(O) programming(O) language(O) Java(B-programming language) .(O)", "words": ["The", "Arduino", "integrated", "development", "environment", "(", "IDE", ")", "is", "a", "cross-platform", "application", "(", "for", "Windows", ",", "macOS", ",", "and", "Linux", ")", "that", "is", "written", "in", "the", "programming", "language", "Java", "."], "labels": ["O", "B-product", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-product", "O", "B-product", "O", "O", "B-product", "O", "O", "O", "O", "O", "O", "O", "O", "B-programming language", "O"]}, "label_list": ["person", "product", "metric", "programming language", "task", "researcher", "organization", "conference", "university", "field", "country", "location", "algorithm"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 568, 6, 556, 6, 3, 7959, 6, 6020, 1612, 6, 2491, 6, 18658, 6, 1470, 6, 2542, 6, 3819, 6, 1057, 6, 684, 6, 1128, 6, 12628, 11, 411, 5, 4892, 17, 1433, 10, 37, 29713, 4580, 606, 1164, 41, 3, 13162, 3, 61, 19, 3, 9, 2269, 18, 29100, 917, 41, 21, 1758, 3, 6, 11486, 3638, 3, 6, 11, 8217, 3, 61, 24, 19, 1545, 16, 8, 6020, 1612, 10318, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.430371, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) Arduino(B-product) integrated(I-product) development(I-product) environment(I-product) ((O) IDE(B-product) )(O) is(O) a(O) cross-platform(O) application(O) ((O) for(O) Windows(B-product),(O) macOS(B-product),(O) and(O) Linux(B-product) )(O) that(O) is(O) written(O) in(O) the(O) programming(O) language(O) Java(B-programming language).(O)"}
{"id": "41", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "41", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: algorithm, location, metric, conference, country, product, researcher, task, university, person, programming language, organization, field and O.\nSentence: A Java implementation using zero based array indexes along with a convenience method for printing the solved order of operations :", "prompt_labels": "A(O) Java(B-programming language) implementation(O) using(O) zero(O) based(O) array(O) indexes(O) along(O) with(O) a(O) convenience(O) method(O) for(O) printing(O) the(O) solved(O) order(O) of(O) operations(O) :(O)", "words": ["A", "Java", "implementation", "using", "zero", "based", "array", "indexes", "along", "with", "a", "convenience", "method", "for", "printing", "the", "solved", "order", "of", "operations", ":"], "labels": ["O", "B-programming language", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["algorithm", "location", "metric", "conference", "country", "product", "researcher", "task", "university", "person", "programming language", "organization", "field"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 12628, 6, 1128, 6, 3, 7959, 6, 2542, 6, 684, 6, 556, 6, 18658, 6, 2491, 6, 3819, 6, 568, 6, 6020, 1612, 6, 1470, 6, 1057, 11, 411, 5, 4892, 17, 1433, 10, 71, 10318, 4432, 338, 5733, 3, 390, 5590, 5538, 15, 7, 590, 28, 3, 9, 6440, 1573, 21, 5361, 8, 16384, 455, 13, 2673, 3, 10, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.430987, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "A(O) Java(B-programming language) implementation(O) using(O) zero(B-algorithm) based(I-algorithm) array(I-algorithm) indexes(I-algorithm) along(O) with(O) a(O) convenience(B-algorithm) method(I-algorithm) for(O) printing(O) the(O) solved(B-metric) order(I-metric) of(I-metric) operations(I-metric) :(O)"}
{"id": "139", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "139", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: algorithm, conference, organization, programming language, field, product, researcher, country, location, task, university, person, metric and O.\nSentence: One of the first versions of the theorem was proved by George Cybenko in 1989 for sigmoid function activation functions. Cybenko G. ( 1989 ) , 2 ( 4 ) , 303-314 .", "prompt_labels": "One(O) of(O) the(O) first(O) versions(O) of(O) the(O) theorem(O) was(O) proved(O) by(O) George(B-researcher) Cybenko(I-researcher) in(O) 1989(O) for(O) sigmoid(B-algorithm) function(I-algorithm) activation(O) functions.(O) Cybenko(B-researcher) G.(I-researcher) ((O) 1989(O) )(O) ,(O) 2(O) ((O) 4(O) )(O) ,(O) 303-314(O) .(O)", "words": ["One", "of", "the", "first", "versions", "of", "the", "theorem", "was", "proved", "by", "George", "Cybenko", "in", "1989", "for", "sigmoid", "function", "activation", "functions.", "Cybenko", "G.", "(", "1989", ")", ",", "2", "(", "4", ")", ",", "303-314", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-researcher", "I-researcher", "O", "O", "O", "B-algorithm", "I-algorithm", "O", "O", "B-researcher", "I-researcher", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["algorithm", "conference", "organization", "programming language", "field", "product", "researcher", "country", "location", "task", "university", "person", "metric"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 12628, 6, 2542, 6, 1470, 6, 6020, 1612, 6, 1057, 6, 556, 6, 18658, 6, 684, 6, 1128, 6, 2491, 6, 3819, 6, 568, 6, 3, 7959, 11, 411, 5, 4892, 17, 1433, 10, 555, 13, 8, 166, 5204, 13, 8, 8, 127, 15, 51, 47, 9193, 57, 3080, 6400, 115, 18994, 16, 9975, 21, 3, 13658, 16661, 26, 1681, 5817, 257, 3621, 5, 6400, 115, 18994, 350, 5, 41, 9975, 3, 61, 3, 6, 204, 41, 314, 3, 61, 3, 6, 3, 23335, 3486, 2534, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.43163, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "One(O) of(O) the(O) first(O) versions(O) of(O) the(O) theorem(O) was(O) proved(O) by(O) George(B-researcher) Cybenko(I-researcher) in(O) 1989(O) for(O) sigmoid(B-algorithm) function(I-algorithm) activation(I-algorithm) functions.(I-algorithm) Cybenko(O) G.(O) ((O) 1989(O) )(O),(O) 2(O) ((O) 4(O) )(O),(O) 303-314(O).(O)"}
{"id": "161", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "161", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: metric, university, person, task, algorithm, product, researcher, field, programming language, organization, country, conference, location and O.\nSentence: Popular loss functions include the hinge loss ( for linear SVMs ) and the log loss ( for logistic regression ) .", "prompt_labels": "Popular(O) loss(O) functions(O) include(O) the(O) hinge(B-metric) loss(I-metric) ((O) for(O) linear(B-algorithm) SVMs(I-algorithm) )(O) and(O) the(O) log(B-metric) loss(I-metric) ((O) for(O) logistic(B-algorithm) regression(I-algorithm) )(O) .(O)", "words": ["Popular", "loss", "functions", "include", "the", "hinge", "loss", "(", "for", "linear", "SVMs", ")", "and", "the", "log", "loss", "(", "for", "logistic", "regression", ")", "."], "labels": ["O", "O", "O", "O", "O", "B-metric", "I-metric", "O", "O", "B-algorithm", "I-algorithm", "O", "O", "O", "B-metric", "I-metric", "O", "O", "B-algorithm", "I-algorithm", "O", "O"]}, "label_list": ["metric", "university", "person", "task", "algorithm", "product", "researcher", "field", "programming language", "organization", "country", "conference", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 3, 7959, 6, 3819, 6, 568, 6, 2491, 6, 12628, 6, 556, 6, 18658, 6, 1057, 6, 6020, 1612, 6, 1470, 6, 684, 6, 2542, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 17479, 1453, 3621, 560, 8, 14875, 1453, 41, 21, 13080, 180, 12623, 7, 3, 61, 11, 8, 4303, 1453, 41, 21, 28820, 26625, 3, 61, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.432203, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Popular(O) loss(B-task) functions(I-task) include(O) the(O) hinge(B-algorithm) loss(I-algorithm) ((O) for(O) linear(B-algorithm) SVMs(I-algorithm) )(O) and(O) the(O) log(B-algorithm) loss(I-algorithm) ((O) for(O) logistic(B-algorithm) regression(I-algorithm) )(O).(O)"}
{"id": "172", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "172", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: person, conference, researcher, programming language, metric, field, algorithm, university, task, product, organization, location, country and O.\nSentence: The Apple iOS operating system used on the iPhone , iPad and iPod Touch uses VoiceOver speech synthesis accessibility .", "prompt_labels": "The(O) Apple(B-product) iOS(I-product) operating(I-product) system(I-product) used(O) on(O) the(O) iPhone(B-product) ,(O) iPad(B-product) and(O) iPod(B-product) Touch(I-product) uses(O) VoiceOver(B-product) speech(I-product) synthesis(I-product) accessibility(O) .(O)", "words": ["The", "Apple", "iOS", "operating", "system", "used", "on", "the", "iPhone", ",", "iPad", "and", "iPod", "Touch", "uses", "VoiceOver", "speech", "synthesis", "accessibility", "."], "labels": ["O", "B-product", "I-product", "I-product", "I-product", "O", "O", "O", "B-product", "O", "B-product", "O", "B-product", "I-product", "O", "B-product", "I-product", "I-product", "O", "O"]}, "label_list": ["person", "conference", "researcher", "programming language", "metric", "field", "algorithm", "university", "task", "product", "organization", "location", "country"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 568, 6, 2542, 6, 18658, 6, 6020, 1612, 6, 3, 7959, 6, 1057, 6, 12628, 6, 3819, 6, 2491, 6, 556, 6, 1470, 6, 1128, 6, 684, 11, 411, 5, 4892, 17, 1433, 10, 37, 2184, 6989, 2699, 358, 261, 30, 8, 3146, 3, 6, 6250, 11, 17003, 11031, 2284, 12347, 23847, 5023, 3, 17282, 17275, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.432768, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) Apple(B-organization) iOS(I-product) operating(O) system(O) used(O) on(O) the(O) iPhone(B-product),(O) iPad(B-product) and(O) iPod(B-product) Touch(I-product) uses(O) VoiceOver(B-algorithm) speech(O) synthesis(O) accessibility(O).(O)"}
{"id": "247", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "247", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: field, researcher, location, country, conference, university, organization, product, task, algorithm, person, programming language, metric and O.\nSentence: With David E. Rumelhart and Ronald J. Williams , Hinton was co-author of a highly cited paper published in 1986 that popularized the backpropagation algorithm for training multi-layer neural networks , The dramatic image-recognition milestone of the AlexNet designed by his student Alex Krizhevsky { { cite web", "prompt_labels": "With(O) David(B-researcher) E.(I-researcher) Rumelhart(I-researcher) and(O) Ronald(B-researcher) J.(I-researcher) Williams(I-researcher) ,(O) Hinton(B-researcher) was(O) co-author(O) of(O) a(O) highly(O) cited(O) paper(O) published(O) in(O) 1986(O) that(O) popularized(O) the(O) backpropagation(B-algorithm) algorithm(I-algorithm) for(O) training(O) multi-layer(B-algorithm) neural(I-algorithm) networks(I-algorithm) ,(O) The(O) dramatic(O) image-recognition(B-task) milestone(O) of(O) the(O) AlexNet(B-algorithm) designed(O) by(O) his(O) student(O) Alex(B-researcher) Krizhevsky(I-researcher) {(O) {(O) cite(O) web(O)", "words": ["With", "David", "E.", "Rumelhart", "and", "Ronald", "J.", "Williams", ",", "Hinton", "was", "co-author", "of", "a", "highly", "cited", "paper", "published", "in", "1986", "that", "popularized", "the", "backpropagation", "algorithm", "for", "training", "multi-layer", "neural", "networks", ",", "The", "dramatic", "image-recognition", "milestone", "of", "the", "AlexNet", "designed", "by", "his", "student", "Alex", "Krizhevsky", "{", "{", "cite", "web"], "labels": ["O", "B-researcher", "I-researcher", "I-researcher", "O", "B-researcher", "I-researcher", "I-researcher", "O", "B-researcher", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-algorithm", "I-algorithm", "O", "O", "B-algorithm", "I-algorithm", "I-algorithm", "O", "O", "O", "B-task", "O", "O", "O", "B-algorithm", "O", "O", "O", "O", "B-researcher", "I-researcher", "O", "O", "O", "O"]}, "label_list": ["field", "researcher", "location", "country", "conference", "university", "organization", "product", "task", "algorithm", "person", "programming language", "metric"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1057, 6, 18658, 6, 1128, 6, 684, 6, 2542, 6, 3819, 6, 1470, 6, 556, 6, 2491, 6, 12628, 6, 568, 6, 6020, 1612, 6, 3, 7959, 11, 411, 5, 4892, 17, 1433, 10, 438, 1955, 262, 5, 2770, 2341, 13626, 11, 18393, 446, 5, 6060, 3, 6, 2018, 6992, 47, 576, 18, 17415, 13, 3, 9, 1385, 3, 11675, 1040, 1790, 16, 12698, 24, 1012, 1601, 8, 223, 1409, 11057, 257, 12628, 21, 761, 1249, 18, 18270, 24228, 5275, 3, 6, 37, 8417, 1023, 18, 60, 75, 12905, 1575, 15521, 13, 8, 5104, 9688, 876, 57, 112, 1236, 5104, 16791, 172, 88, 208, 5352, 3, 2, 3, 2, 3, 8464, 765, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.433564, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "With(O) David(B-researcher) E.(I-researcher) Rumelhart(I-researcher) and(O) Ronald(B-researcher) J.(I-researcher) Williams(I-researcher),(O) Hinton(O) was(O) co-author(O) of(O) a(O) highly(O) cited(O) paper(O) published(O) in(O) 1986(O) that(O) popularized(O) the(O) backpropagation(B-algorithm) algorithm(I-algorithm) for(O) training(O) multi-layer(B-task) neural(I-task) networks(I-task),(O) The(O) dramatic(O) image-recognition(O) milestone(O) of(O) the(O) AlexNet(B-product) designed(O) by(O) his(O) student(O) Alex(B-person) Krizhevsky(I-person) (O) (O) cite(O) web,(O)"}
{"id": "292", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "292", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: algorithm, product, task, university, metric, person, programming language, location, conference, country, organization, researcher, field and O.\nSentence: The manipulator is what makes the robot move , and the design of these systems can be categorized into several common types , such as SCARA and cartesian coordinate robot , which use different coordinate systems to direct the arms of the machine .", "prompt_labels": "The(O) manipulator(O) is(O) what(O) makes(O) the(O) robot(O) move(O) ,(O) and(O) the(O) design(O) of(O) these(O) systems(O) can(O) be(O) categorized(O) into(O) several(O) common(O) types(O) ,(O) such(O) as(O) SCARA(O) and(O) cartesian(O) coordinate(O) robot(O) ,(O) which(O) use(O) different(O) coordinate(O) systems(O) to(O) direct(O) the(O) arms(O) of(O) the(O) machine(O) .(O)", "words": ["The", "manipulator", "is", "what", "makes", "the", "robot", "move", ",", "and", "the", "design", "of", "these", "systems", "can", "be", "categorized", "into", "several", "common", "types", ",", "such", "as", "SCARA", "and", "cartesian", "coordinate", "robot", ",", "which", "use", "different", "coordinate", "systems", "to", "direct", "the", "arms", "of", "the", "machine", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["algorithm", "product", "task", "university", "metric", "person", "programming language", "location", "conference", "country", "organization", "researcher", "field"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 12628, 6, 556, 6, 2491, 6, 3819, 6, 3, 7959, 6, 568, 6, 6020, 1612, 6, 1128, 6, 2542, 6, 684, 6, 1470, 6, 18658, 6, 1057, 11, 411, 5, 4892, 17, 1433, 10, 37, 19022, 1016, 19, 125, 656, 8, 7567, 888, 3, 6, 11, 8, 408, 13, 175, 1002, 54, 36, 3, 28295, 139, 633, 1017, 1308, 3, 6, 224, 38, 6508, 21159, 11, 3329, 10488, 11639, 7567, 3, 6, 84, 169, 315, 11639, 1002, 12, 1223, 8, 6026, 13, 8, 1437, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.434285, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) manipulator(B-product) is(O) what(O) makes(O) the(O) robot(B-product) move(O),(O) and(O) the(O) design(O) of(O) these(O) systems(O) can(O) be(O) categorized(O) into(O) several(O) common(O) types(O),(O) such(O) as(O) SCARA(B-product) and(O) cartesian(B-product) coordinate(I-product) robot(I-product),(O) which(O) use(O) different(O) coordinate(O) systems(O) to(O) direct(O) the(O) arms(O) of(O) the(O) machine(B-product).(O)"}
{"id": "319", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "319", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: field, university, organization, conference, task, algorithm, metric, country, location, researcher, programming language, product, person and O.\nSentence: The method is based on estimating the conditional probabilities using the nonparametric maximum likelihood method which leads", "prompt_labels": "The(O) method(O) is(O) based(O) on(O) estimating(O) the(O) conditional(O) probabilities(O) using(O) the(O) nonparametric(B-metric) maximum(I-metric) likelihood(I-metric) method(O) which(O) leads(O)", "words": ["The", "method", "is", "based", "on", "estimating", "the", "conditional", "probabilities", "using", "the", "nonparametric", "maximum", "likelihood", "method", "which", "leads"], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-metric", "I-metric", "I-metric", "O", "O", "O"]}, "label_list": ["field", "university", "organization", "conference", "task", "algorithm", "metric", "country", "location", "researcher", "programming language", "product", "person"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1057, 6, 3819, 6, 1470, 6, 2542, 6, 2491, 6, 12628, 6, 3, 7959, 6, 684, 6, 1128, 6, 18658, 6, 6020, 1612, 6, 556, 6, 568, 11, 411, 5, 4892, 17, 1433, 10, 37, 1573, 19, 3, 390, 30, 3, 30739, 8, 1706, 138, 9551, 2197, 338, 8, 529, 6583, 7959, 2411, 17902, 1573, 84, 3433, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.434823, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) method(O) is(O) based(O) on(O) estimating(O) the(O) conditional(B-metric) probabilities(I-metric) using(O) the(O) nonparametric(B-algorithm) maximum(I-algorithm) likelihood(I-algorithm) method(I-algorithm) which(O) leads(O)"}
{"id": "330", "dataset": "crossner_ai", "split": "dev", "instance": {"id": "330", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: country, researcher, metric, conference, university, location, person, product, programming language, algorithm, organization, task, field and O.\nSentence: In addition to the standard hinge loss math ( 1-yf ( x ) ) _ + / math for labeled data , a loss function math ( -1 | f ( x ) | ) _ + / math is introduced over the unlabeled data by letting mathy = \\ operatorname { sign } { f ( x ) } / math .", "prompt_labels": "In(O) addition(O) to(O) the(O) standard(O) hinge(B-metric) loss(I-metric) math(O) ((O) 1-yf(O) ((O) x(O) )(O) )(O) _(O) +(O) /(O) math(O) for(O) labeled(O) data(O) ,(O) a(O) loss(O) function(O) math(O) ((O) -1(O) |(O) f(O) ((O) x(O) )(O) |(O) )(O) _(O) +(O) /(O) math(O) is(O) introduced(O) over(O) the(O) unlabeled(O) data(O) by(O) letting(O) mathy(O) =(O) \\(O) operatorname(O) {(O) sign(O) }(O) {(O) f(O) ((O) x(O) )(O) }(O) /(O) math(O) .(O)", "words": ["In", "addition", "to", "the", "standard", "hinge", "loss", "math", "(", "1-yf", "(", "x", ")", ")", "_", "+", "/", "math", "for", "labeled", "data", ",", "a", "loss", "function", "math", "(", "-1", "|", "f", "(", "x", ")", "|", ")", "_", "+", "/", "math", "is", "introduced", "over", "the", "unlabeled", "data", "by", "letting", "mathy", "=", "\\", "operatorname", "{", "sign", "}", "{", "f", "(", "x", ")", "}", "/", "math", "."], "labels": ["O", "O", "O", "O", "O", "B-metric", "I-metric", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["country", "researcher", "metric", "conference", "university", "location", "person", "product", "programming language", "algorithm", "organization", "task", "field"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 684, 6, 18658, 6, 3, 7959, 6, 2542, 6, 3819, 6, 1128, 6, 568, 6, 556, 6, 6020, 1612, 6, 12628, 6, 1470, 6, 2491, 6, 1057, 11, 411, 5, 4892, 17, 1433, 10, 86, 811, 12, 8, 1068, 14875, 1453, 7270, 41, 8218, 63, 89, 41, 3, 226, 3, 61, 3, 61, 3, 834, 1768, 3, 87, 7270, 21, 3783, 15, 26, 331, 3, 6, 3, 9, 1453, 1681, 7270, 41, 3, 2292, 1820, 3, 89, 41, 3, 226, 3, 61, 1820, 3, 61, 3, 834, 1768, 3, 87, 7270, 19, 3665, 147, 8, 73, 9339, 400, 26, 331, 57, 3, 8035, 7270, 63, 3274, 3, 2, 7221, 4350, 3, 2, 1320, 3, 2, 3, 2, 3, 89, 41, 3, 226, 3, 61, 3, 2, 3, 87, 7270, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.435523, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) addition(O) to(O) the(O) standard(O) hinge(B-algorithm) loss(I-algorithm) math(I-algorithm) ((O) 1-yf(O) ((O) x(O) )(O) )(O) _(O) +(O) /(O) math(O) for(O) labeled(B-metric) data(I-metric),(O) a(O) loss(B-algorithm) function(I-algorithm) math(I-algorithm) ((O) -1(O) |(O) f(O) ((O) x(O) )(O) |(O) )(O) _(O) +(O) /(O) math(O) is(O) introduced(O) over(O) the(O) unlabeled(B-metric) data(I-metric) by(O) letting(O) mathy(B-algorithm) =(O) (O) operatorname(B-algorithm) (O) sign(B-algorithm) (O) (O) f(O) ((O) x(O) )(O) (O) /(O) math(O).(O)"}
{"id": "12", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "12", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: person, award, organization, event, location, country, writer, literary genre, poem, book, magazine and O.\nSentence: Later in his life , Ginsberg formed a bridge between the beat movement of the 1950s and the hippie s of the 1960s , befriending , among others , Timothy Leary , Ken Kesey , Hunter S. Thompson , and Bob Dylan .", "prompt_labels": "Later(O) in(O) his(O) life(O) ,(O) Ginsberg(B-writer) formed(O) a(O) bridge(O) between(O) the(O) beat(O) movement(O) of(O) the(O) 1950s(O) and(O) the(O) hippie(O) s(O) of(O) the(O) 1960s(O) ,(O) befriending(O) ,(O) among(O) others(O) ,(O) Timothy(B-writer) Leary(I-writer) ,(O) Ken(B-writer) Kesey(I-writer) ,(O) Hunter(B-writer) S.(I-writer) Thompson(I-writer) ,(O) and(O) Bob(B-writer) Dylan(I-writer) .(O)", "words": ["Later", "in", "his", "life", ",", "Ginsberg", "formed", "a", "bridge", "between", "the", "beat", "movement", "of", "the", "1950s", "and", "the", "hippie", "s", "of", "the", "1960s", ",", "befriending", ",", "among", "others", ",", "Timothy", "Leary", ",", "Ken", "Kesey", ",", "Hunter", "S.", "Thompson", ",", "and", "Bob", "Dylan", "."], "labels": ["O", "O", "O", "O", "O", "B-writer", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "I-writer", "O", "O", "B-writer", "I-writer", "O"]}, "label_list": ["person", "award", "organization", "event", "location", "country", "writer", "literary genre", "poem", "book", "magazine"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 568, 6, 2760, 6, 1470, 6, 605, 6, 1128, 6, 684, 6, 4346, 6, 14551, 5349, 6, 14193, 6, 484, 6, 3835, 11, 411, 5, 4892, 17, 1433, 10, 10511, 16, 112, 280, 3, 6, 15079, 7, 2235, 5147, 3, 9, 4716, 344, 8, 3853, 2426, 13, 8, 10247, 7, 11, 8, 5436, 8082, 3, 7, 13, 8, 8754, 7, 3, 6, 36, 15504, 53, 3, 6, 859, 717, 3, 6, 23720, 312, 1208, 3, 6, 5704, 2566, 7, 15, 63, 3, 6, 14046, 180, 5, 14653, 3, 6, 11, 5762, 24831, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.436252, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Later(O) in(O) his(O) life(O),(O) Ginsberg(O) formed(O) a(O) bridge(O) between(O) the(O) beat(B-literary genre) movement(I-literary genre) of(O) the(O) 1950s(O) and(O) the(O) hippie(B-literary genre) s(I-literary genre) of(O) the(O) 1960s(O),(O) befriending(O),(O) among(O) others(O),(O) Timothy(B-person) Leary(I-person),(O) Ken(B-person) Kesey(I-person),(O) Hunter(B-person) S.(I-person) Thompson(I-person),(O) and(O) Bob(B-person) Dylan(I-person).(O)"}
{"id": "93", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "93", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: magazine, writer, literary genre, location, award, poem, event, country, organization, book, person and O.\nSentence: The crowds were delighted with the stories of romances , the wickedness of Macaire , and the misfortunes of Blanziflor , the terrors of the Babilonia Infernale and the blessedness of the Gerusalemme celeste , and the singers of religious poetry vied with those of the chansons de geste .", "prompt_labels": "The(O) crowds(O) were(O) delighted(O) with(O) the(O) stories(O) of(O) romances(O) ,(O) the(O) wickedness(O) of(O) Macaire(B-poem) ,(O) and(O) the(O) misfortunes(O) of(O) Blanziflor(B-poem) ,(O) the(O) terrors(O) of(O) the(O) Babilonia(B-poem) Infernale(I-poem) and(O) the(O) blessedness(O) of(O) the(O) Gerusalemme(B-poem) celeste(I-poem) ,(O) and(O) the(O) singers(O) of(O) religious(O) poetry(B-literary genre) vied(O) with(O) those(O) of(O) the(O) chansons(B-poem) de(I-poem) geste(I-poem) .(O)", "words": ["The", "crowds", "were", "delighted", "with", "the", "stories", "of", "romances", ",", "the", "wickedness", "of", "Macaire", ",", "and", "the", "misfortunes", "of", "Blanziflor", ",", "the", "terrors", "of", "the", "Babilonia", "Infernale", "and", "the", "blessedness", "of", "the", "Gerusalemme", "celeste", ",", "and", "the", "singers", "of", "religious", "poetry", "vied", "with", "those", "of", "the", "chansons", "de", "geste", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-poem", "O", "O", "O", "O", "O", "B-poem", "O", "O", "O", "O", "O", "B-poem", "I-poem", "O", "O", "O", "O", "O", "B-poem", "I-poem", "O", "O", "O", "O", "O", "O", "B-literary genre", "O", "O", "O", "O", "O", "B-poem", "I-poem", "I-poem", "O"]}, "label_list": ["magazine", "writer", "literary genre", "location", "award", "poem", "event", "country", "organization", "book", "person"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 3835, 6, 4346, 6, 14551, 5349, 6, 1128, 6, 2760, 6, 14193, 6, 605, 6, 684, 6, 1470, 6, 484, 6, 568, 11, 411, 5, 4892, 17, 1433, 10, 37, 4374, 7, 130, 10693, 28, 8, 1937, 13, 14210, 7, 3, 6, 8, 25972, 655, 13, 2143, 2378, 3, 6, 11, 8, 1817, 1161, 17, 444, 7, 13, 6942, 29, 172, 99, 322, 3, 6, 8, 17187, 7, 13, 8, 272, 3587, 8008, 86, 8377, 9, 109, 11, 8, 11320, 655, 13, 8, 5744, 302, 138, 26570, 1235, 849, 3, 6, 11, 8, 7634, 7, 13, 4761, 10773, 2240, 26, 28, 273, 13, 8, 22575, 7, 20, 7671, 15, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.436976, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) crowds(O) were(O) delighted(O) with(O) the(O) stories(O) of(O) romances(B-literary genre),(O) the(O) wickedness(O) of(O) Macaire(B-person),(O) and(O) the(O) misfortunes(O) of(O) Blanziflor(B-person),(O) the(O) terrors(O) of(O) the(O) Babilonia(B-event) Infernale(I-event) and(O) the(O) blessedness(O) of(O) the(O) Gerusalemme(B-person) celeste(I-person),(O) and(O) the(O) singers(O) of(O) religious(B-literary genre) poetry(I-literary genre) vied(O) with(O) those(O) of(O) the(O) chansons(B-poem) de(I-poem) geste(I-poem).(O)"}
{"id": "110", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "110", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, writer, literary genre, poem, book, magazine, person, event, award, country, organization and O.\nSentence: Nominated for Academy Awards in nine categories , it won an Academy Award for Best Original Screenplay by Herman J. Mankiewicz and Welles .", "prompt_labels": "Nominated(O) for(O) Academy(B-award) Awards(I-award) in(O) nine(O) categories(O) ,(O) it(O) won(O) an(O) Academy(B-award) Award(I-award) for(I-award) Best(I-award) Original(I-award) Screenplay(I-award) by(O) Herman(B-writer) J.(I-writer) Mankiewicz(I-writer) and(O) Welles(B-writer) .(O)", "words": ["Nominated", "for", "Academy", "Awards", "in", "nine", "categories", ",", "it", "won", "an", "Academy", "Award", "for", "Best", "Original", "Screenplay", "by", "Herman", "J.", "Mankiewicz", "and", "Welles", "."], "labels": ["O", "O", "B-award", "I-award", "O", "O", "O", "O", "O", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "I-award", "O", "B-writer", "I-writer", "I-writer", "O", "B-writer", "O"]}, "label_list": ["location", "writer", "literary genre", "poem", "book", "magazine", "person", "event", "award", "country", "organization"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 4346, 6, 14551, 5349, 6, 14193, 6, 484, 6, 3835, 6, 568, 6, 605, 6, 2760, 6, 684, 6, 1470, 11, 411, 5, 4892, 17, 1433, 10, 465, 1109, 920, 21, 4702, 6580, 16, 4169, 5897, 3, 6, 34, 751, 46, 4702, 3677, 21, 1648, 8465, 9937, 4895, 57, 1347, 348, 446, 5, 1140, 11390, 210, 447, 172, 11, 1548, 15, 7, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.43754, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Nominated(O) for(O) Academy(B-award) Awards(I-award) in(O) nine(O) categories(O),(O) it(O) won(O) an(O) Academy(B-award) Award(I-award) for(O) Best(B-award) Original(I-award) Screenplay(I-award) by(O) Herman(B-writer) J.(I-writer) Mankiewicz(I-writer) and(O) Welles(B-writer).(O)"}
{"id": "138", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "138", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: writer, book, country, literary genre, award, person, magazine, location, organization, event, poem and O.\nSentence: The Letterman Foundation for Courtesy and Grooming is a private foundation through which Letterman has donated millions of dollars to charities and other non-profits in Indiana and Montana , celebrity-affiliated organizations such as Paul Newman ' s Hole in the Wall Gang Camp , Ball State University , the American Cancer Society , the Salvation Army , and M\u00e9decins Sans Fronti\u00e8res .", "prompt_labels": "The(B-organization) Letterman(I-organization) Foundation(I-organization) for(I-organization) Courtesy(I-organization) and(I-organization) Grooming(I-organization) is(O) a(O) private(O) foundation(O) through(O) which(O) Letterman(B-writer) has(O) donated(O) millions(O) of(O) dollars(O) to(O) charities(O) and(O) other(O) non-profits(O) in(O) Indiana(B-location) and(O) Montana(B-location) ,(O) celebrity-affiliated(O) organizations(O) such(O) as(O) Paul(B-person) Newman(I-person) '(O) s(O) Hole(B-organization) in(I-organization) the(I-organization) Wall(I-organization) Gang(I-organization) Camp(I-organization) ,(O) Ball(B-organization) State(I-organization) University(I-organization) ,(O) the(O) American(B-organization) Cancer(I-organization) Society(I-organization) ,(O) the(O) Salvation(B-organization) Army(I-organization) ,(O) and(O) M\u00e9decins(B-organization) Sans(I-organization) Fronti\u00e8res(I-organization) .(O)", "words": ["The", "Letterman", "Foundation", "for", "Courtesy", "and", "Grooming", "is", "a", "private", "foundation", "through", "which", "Letterman", "has", "donated", "millions", "of", "dollars", "to", "charities", "and", "other", "non-profits", "in", "Indiana", "and", "Montana", ",", "celebrity-affiliated", "organizations", "such", "as", "Paul", "Newman", "'", "s", "Hole", "in", "the", "Wall", "Gang", "Camp", ",", "Ball", "State", "University", ",", "the", "American", "Cancer", "Society", ",", "the", "Salvation", "Army", ",", "and", "M\u00e9decins", "Sans", "Fronti\u00e8res", "."], "labels": ["B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "O", "O", "O", "O", "O", "B-writer", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-location", "O", "B-location", "O", "O", "O", "O", "O", "B-person", "I-person", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "B-organization", "I-organization", "I-organization", "O", "O", "B-organization", "I-organization", "I-organization", "O", "O", "B-organization", "I-organization", "O", "O", "B-organization", "I-organization", "I-organization", "O"]}, "label_list": ["writer", "book", "country", "literary genre", "award", "person", "magazine", "location", "organization", "event", "poem"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 4346, 6, 484, 6, 684, 6, 14551, 5349, 6, 2760, 6, 568, 6, 3835, 6, 1128, 6, 1470, 6, 605, 6, 14193, 11, 411, 5, 4892, 17, 1433, 10, 37, 8706, 348, 2941, 21, 2243, 15, 7, 63, 11, 350, 3082, 53, 19, 3, 9, 1045, 3361, 190, 84, 8706, 348, 65, 13207, 4040, 13, 3740, 12, 20088, 11, 119, 529, 18, 6046, 7, 16, 11494, 11, 16751, 3, 6, 17086, 18, 4127, 13565, 1054, 2371, 224, 38, 1838, 368, 348, 3, 31, 3, 7, 5838, 15, 16, 8, 3556, 17423, 4594, 3, 6, 4155, 1015, 636, 3, 6, 8, 797, 9520, 3467, 3, 6, 8, 5158, 208, 257, 6788, 3, 6, 11, 10598, 24223, 29, 7, 1051, 7, 7383, 11996, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.438403, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) Letterman(B-organization) Foundation(I-organization) for(I-organization) Courtesy(I-organization) and(I-organization) Grooming(I-organization) is(O) a(O) private(O) foundation(O) through(O) which(O) Letterman(O) has(O) donated(O) millions(O) of(O) dollars(O) to(O) charities(O) and(O) other(O) non-profits(O) in(O) Indiana(B-location) and(O) Montana(B-location),(O) celebrity-affiliated(O) organizations(O) such(O) as(O) Paul(B-organization) Newman(I-organization) '(I-organization) s(I-organization) Hole(I-organization) in(I-organization) the(I-organization) Wall(I-organization) Gang(I-organization) Camp(I-organization),(O) Ball(B-organization) State(I-organization) University(I-organization),(O) the(O) American(B-organization) Cancer(I-organization) Society(I-organization),(O) the(O) Salvation(B-organization) Army(I-organization),(O) and(O) M\u00e9decins(B-organization) Sans(I-organization) Fronti\u00e8res(I-organization).(O)"}
{"id": "177", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "177", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: organization, magazine, award, book, country, person, literary genre, writer, poem, event, location and O.\nSentence: The main facts of his life are stated in his long poem De triumphis ecclesiae ( On the triumphs of the Church ) .", "prompt_labels": "The(O) main(O) facts(O) of(O) his(O) life(O) are(O) stated(O) in(O) his(O) long(B-literary genre) poem(I-literary genre) De(B-poem) triumphis(I-poem) ecclesiae(I-poem) ((O) On(B-poem) the(I-poem) triumphs(I-poem) of(I-poem) the(I-poem) Church(I-poem) )(O) .(O)", "words": ["The", "main", "facts", "of", "his", "life", "are", "stated", "in", "his", "long", "poem", "De", "triumphis", "ecclesiae", "(", "On", "the", "triumphs", "of", "the", "Church", ")", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-literary genre", "I-literary genre", "B-poem", "I-poem", "I-poem", "O", "B-poem", "I-poem", "I-poem", "I-poem", "I-poem", "I-poem", "O", "O"]}, "label_list": ["organization", "magazine", "award", "book", "country", "person", "literary genre", "writer", "poem", "event", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1470, 6, 3835, 6, 2760, 6, 484, 6, 684, 6, 568, 6, 14551, 5349, 6, 4346, 6, 14193, 6, 605, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 37, 711, 6688, 13, 112, 280, 33, 4568, 16, 112, 307, 14193, 374, 20020, 159, 3, 15, 75, 2482, 7, 23, 9, 15, 41, 461, 8, 20020, 7, 13, 8, 2345, 3, 61, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.438933, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) main(O) facts(O) of(O) his(O) life(O) are(O) stated(O) in(O) his(O) long(O) poem(O) De(B-poem) triumphis(I-poem) ecclesiae(I-poem) ((O) On(O) the(O) triumphs(O) of(O) the(O) Church(B-organization) )(O).(O)"}
{"id": "262", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "262", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: award, location, country, book, event, literary genre, magazine, organization, person, writer, poem and O.\nSentence: Famous Hopwood award winners include Robert Hayden , Marge Piercy , Arthur Miller , Betty Smith , Lawrence Kasdan , John Ciardi , Mary Gaitskill , Edmund White , Nancy Willard , Frank O 'Hara , and I-writer I-writer .", "prompt_labels": "Famous(O) Hopwood(B-award) award(I-award) winners(O) include(O) Robert(B-writer) Hayden(I-writer) ,(O) Marge(B-writer) Piercy(I-writer) ,(O) Arthur(B-writer) Miller(I-writer) ,(O) Betty(B-writer) Smith(I-writer) ,(O) Lawrence(B-writer) Kasdan(I-writer) ,(O) John(B-writer) Ciardi(I-writer) ,(O) Mary(B-writer) Gaitskill(I-writer) ,(O) Edmund(B-writer) White(I-writer) ,(O) Nancy(B-writer) Willard(I-writer) ,(O) Frank(B-writer) O(I-writer) 'Hara(I-writer) ,(O) and(O) I-writer(B-writer) I-writer(I-writer) .(O)", "words": ["Famous", "Hopwood", "award", "winners", "include", "Robert", "Hayden", ",", "Marge", "Piercy", ",", "Arthur", "Miller", ",", "Betty", "Smith", ",", "Lawrence", "Kasdan", ",", "John", "Ciardi", ",", "Mary", "Gaitskill", ",", "Edmund", "White", ",", "Nancy", "Willard", ",", "Frank", "O", "'Hara", ",", "and", "I-writer", "I-writer", "."], "labels": ["O", "B-award", "I-award", "O", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "O", "B-writer", "I-writer", "I-writer", "O", "O", "B-writer", "I-writer", "O"]}, "label_list": ["award", "location", "country", "book", "event", "literary genre", "magazine", "organization", "person", "writer", "poem"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2760, 6, 1128, 6, 684, 6, 484, 6, 605, 6, 14551, 5349, 6, 3835, 6, 1470, 6, 568, 6, 4346, 6, 14193, 11, 411, 5, 4892, 17, 1433, 10, 29952, 15139, 2037, 2760, 8969, 560, 2715, 8567, 537, 3, 6, 16409, 15, 18451, 75, 63, 3, 6, 13962, 9429, 3, 6, 9736, 63, 3931, 3, 6, 16617, 12783, 3768, 3, 6, 1079, 4385, 986, 23, 3, 6, 3790, 2776, 7085, 10824, 3, 6, 31208, 1945, 3, 6, 17117, 2003, 986, 3, 6, 4937, 411, 3, 31, 15537, 9, 3, 6, 11, 27, 18, 12756, 27, 18, 12756, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.439576, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Famous(O) Hopwood(B-award) award(I-award) winners(O) include(O) Robert(B-person) Hayden(I-person),(O) Marge(B-person) Piercy(I-person),(O) Arthur(B-person) Miller(I-person),(O) Betty(B-person) Smith(I-person),(O) Lawrence(B-person) Kasdan(I-person),(O) John(B-person) Ciardi(I-person),(O) Mary(B-person) Gaitskill(I-person),(O) Edmund(B-person) White(I-person),(O) Nancy(B-person) Willard(I-person),(O) Frank(B-person) O(I-person) 'Hara(I-person),(O) and(O) I-writer(B-writer) I-writer(B-writer).(O)"}
{"id": "294", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "294", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: person, book, award, country, event, writer, organization, poem, literary genre, magazine, location and O.\nSentence: Master Humphrey 's Clock was shut down , though Dickens was still keen on the idea of the weekly magazine , a form he liked , a liking that had begun with his childhood reading of the eighteenth-century magazines Tatler and The Spectator .", "prompt_labels": "Master(B-book) Humphrey(I-book) 's(I-book) Clock(I-book) was(O) shut(O) down(O) ,(O) though(O) Dickens(B-writer) was(O) still(O) keen(O) on(O) the(O) idea(O) of(O) the(O) weekly(O) magazine(O) ,(O) a(O) form(O) he(O) liked(O) ,(O) a(O) liking(O) that(O) had(O) begun(O) with(O) his(O) childhood(O) reading(O) of(O) the(O) eighteenth-century(O) magazines(O) Tatler(B-magazine) and(O) The(B-magazine) Spectator(I-magazine) .(O)", "words": ["Master", "Humphrey", "'s", "Clock", "was", "shut", "down", ",", "though", "Dickens", "was", "still", "keen", "on", "the", "idea", "of", "the", "weekly", "magazine", ",", "a", "form", "he", "liked", ",", "a", "liking", "that", "had", "begun", "with", "his", "childhood", "reading", "of", "the", "eighteenth-century", "magazines", "Tatler", "and", "The", "Spectator", "."], "labels": ["B-book", "I-book", "I-book", "I-book", "O", "O", "O", "O", "O", "B-writer", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-magazine", "O", "B-magazine", "I-magazine", "O"]}, "label_list": ["person", "book", "award", "country", "event", "writer", "organization", "poem", "literary genre", "magazine", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 568, 6, 484, 6, 2760, 6, 684, 6, 605, 6, 4346, 6, 1470, 6, 14193, 6, 14551, 5349, 6, 3835, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 3226, 3455, 7656, 60, 63, 3, 31, 7, 205, 4029, 47, 6979, 323, 3, 6, 713, 21269, 35, 7, 47, 341, 9805, 30, 8, 800, 13, 8, 5547, 3835, 3, 6, 3, 9, 607, 3, 88, 6528, 3, 6, 3, 9, 23340, 24, 141, 11173, 28, 112, 7352, 1183, 13, 8, 2641, 15, 35, 189, 18, 14006, 13254, 9233, 1171, 11, 37, 3, 7727, 17, 1016, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.440228, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Master(B-book) Humphrey(I-book)'s(I-book) Clock(I-book) was(O) shut(O) down(O),(O) though(O) Dickens(B-writer) was(O) still(O) keen(O) on(O) the(O) idea(O) of(O) the(O) weekly(O) magazine(O),(O) a(O) form(O) he(O) liked(O),(O) a(O) liking(O) that(O) had(O) begun(O) with(O) his(O) childhood(O) reading(O) of(O) the(O) eighteenth-century(O) magazines(O) Tatler(B-magazine) and(O) The(B-magazine) Spectator(I-magazine).(O)"}
{"id": "318", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "318", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: country, location, literary genre, organization, person, award, event, book, magazine, writer, poem and O.\nSentence: Elizabeth Gaskell ' s biography The Life of Charlotte Bront\u00eb was published in 1857 .", "prompt_labels": "Elizabeth(B-writer) Gaskell(I-writer) '(O) s(O) biography(B-literary genre) The(B-book) Life(I-book) of(I-book) Charlotte(I-book) Bront\u00eb(I-book) was(O) published(O) in(O) 1857(O) .(O)", "words": ["Elizabeth", "Gaskell", "'", "s", "biography", "The", "Life", "of", "Charlotte", "Bront\u00eb", "was", "published", "in", "1857", "."], "labels": ["B-writer", "I-writer", "O", "O", "B-literary genre", "B-book", "I-book", "I-book", "I-book", "I-book", "O", "O", "O", "O", "O"]}, "label_list": ["country", "location", "literary genre", "organization", "person", "award", "event", "book", "magazine", "writer", "poem"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 684, 6, 1128, 6, 14551, 5349, 6, 1470, 6, 568, 6, 2760, 6, 605, 6, 484, 6, 3835, 6, 4346, 6, 14193, 11, 411, 5, 4892, 17, 1433, 10, 9066, 6435, 5768, 40, 3, 31, 3, 7, 25705, 37, 2330, 13, 11240, 272, 4438, 2, 47, 1790, 16, 507, 3436, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.440818, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Elizabeth(B-person) Gaskell(I-person) '(O) s(O) biography(O) The(B-book) Life(I-book) of(I-book) Charlotte(I-book) Bront(I-book) was(O) published(O) in(O) 1857(O).(O)"}
{"id": "336", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "336", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: organization, magazine, country, literary genre, event, location, poem, person, award, writer, book and O.\nSentence: In 1909 , Strindberg thought he might get the Nobel Prize in Literature , but instead lost to Selma Lagerl\u00f6f , the first woman and first Swede to win the award .", "prompt_labels": "In(O) 1909(O) ,(O) Strindberg(B-writer) thought(O) he(O) might(O) get(O) the(O) Nobel(B-award) Prize(I-award) in(I-award) Literature(I-award) ,(O) but(O) instead(O) lost(O) to(O) Selma(B-writer) Lagerl\u00f6f(I-writer) ,(O) the(O) first(O) woman(O) and(O) first(O) Swede(O) to(O) win(O) the(O) award(O) .(O)", "words": ["In", "1909", ",", "Strindberg", "thought", "he", "might", "get", "the", "Nobel", "Prize", "in", "Literature", ",", "but", "instead", "lost", "to", "Selma", "Lagerl\u00f6f", ",", "the", "first", "woman", "and", "first", "Swede", "to", "win", "the", "award", "."], "labels": ["O", "O", "O", "B-writer", "O", "O", "O", "O", "O", "B-award", "I-award", "I-award", "I-award", "O", "O", "O", "O", "O", "B-writer", "I-writer", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["organization", "magazine", "country", "literary genre", "event", "location", "poem", "person", "award", "writer", "book"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1470, 6, 3835, 6, 684, 6, 14551, 5349, 6, 605, 6, 1128, 6, 14193, 6, 568, 6, 2760, 6, 4346, 6, 484, 11, 411, 5, 4892, 17, 1433, 10, 86, 957, 4198, 3, 6, 472, 13119, 2235, 816, 3, 88, 429, 129, 8, 22232, 11329, 16, 15019, 15, 3, 6, 68, 1446, 1513, 12, 11471, 51, 9, 16205, 9081, 89, 3, 6, 8, 166, 2335, 11, 166, 7320, 15, 221, 12, 1369, 8, 2760, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.43569, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 1909(O),(O) Strindberg(O) thought(O) he(O) might(O) get(O) the(O) Nobel(B-award) Prize(I-award) in(I-award) Literature(I-award),(O) but(O) instead(O) lost(O) to(O) Selma(B-person) Lagerl\u00f6f(I-person),(O) the(O) first(O) woman(O) and(O) first(O) Swede(B-country) to(O) win(O) the(O) award(O).(O)"}
{"id": "391", "dataset": "crossner_literature", "split": "dev", "instance": {"id": "391", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: award, location, country, literary genre, event, organization, magazine, book, poem, person, writer and O.\nSentence: In 1946 the Society of Jesus was banned and the Franciscans were banned in 1947 .", "prompt_labels": "In(O) 1946(O) the(O) Society(B-organization) of(I-organization) Jesus(I-organization) was(O) banned(O) and(O) the(O) Franciscans(B-organization) were(O) banned(O) in(O) 1947(O) .(O)", "words": ["In", "1946", "the", "Society", "of", "Jesus", "was", "banned", "and", "the", "Franciscans", "were", "banned", "in", "1947", "."], "labels": ["O", "O", "O", "B-organization", "I-organization", "I-organization", "O", "O", "O", "O", "B-organization", "O", "O", "O", "O", "O"]}, "label_list": ["award", "location", "country", "literary genre", "event", "organization", "magazine", "book", "poem", "person", "writer"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2760, 6, 1128, 6, 684, 6, 14551, 5349, 6, 605, 6, 1470, 6, 3835, 6, 484, 6, 14193, 6, 568, 6, 4346, 11, 411, 5, 4892, 17, 1433, 10, 86, 25021, 8, 3467, 13, 1850, 47, 18168, 11, 8, 11065, 1608, 7, 130, 18168, 16, 23992, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.437203, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 1946(O) the(O) Society(B-organization) of(I-organization) Jesus(I-organization) was(O) banned(O) and(O) the(O) Franciscans(B-organization) were(O) banned(O) in(O) 1947(O).(O)"}
{"id": "80", "dataset": "crossner_music", "split": "dev", "instance": {"id": "80", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: music genre, person, location, musical instrument, country, band, event, album, musical artist, award, song, organization and O.\nSentence: This is the method used by Bands of America , the Indiana State School Music Association , Kentucky Music Educators Association and the University Interscholastic League .", "prompt_labels": "This(O) is(O) the(O) method(O) used(O) by(O) Bands(B-organization) of(I-organization) America(I-organization) ,(O) the(O) Indiana(B-organization) State(I-organization) School(I-organization) Music(I-organization) Association(I-organization) ,(O) Kentucky(B-organization) Music(I-organization) Educators(I-organization) Association(I-organization) and(O) the(O) University(B-organization) Interscholastic(I-organization) League(I-organization) .(O)", "words": ["This", "is", "the", "method", "used", "by", "Bands", "of", "America", ",", "the", "Indiana", "State", "School", "Music", "Association", ",", "Kentucky", "Music", "Educators", "Association", "and", "the", "University", "Interscholastic", "League", "."], "labels": ["O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "O", "B-organization", "I-organization", "I-organization", "O"]}, "label_list": ["music genre", "person", "location", "musical instrument", "country", "band", "event", "album", "musical artist", "award", "song", "organization"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 723, 5349, 6, 568, 6, 1128, 6, 4183, 5009, 6, 684, 6, 1928, 6, 605, 6, 2306, 6, 4183, 2377, 6, 2760, 6, 2324, 6, 1470, 11, 411, 5, 4892, 17, 1433, 10, 100, 19, 8, 1573, 261, 57, 4483, 7, 13, 1371, 3, 6, 8, 11494, 1015, 1121, 3057, 2125, 3, 6, 13401, 3057, 3, 18846, 127, 7, 2125, 11, 8, 636, 3037, 7, 14297, 10057, 3815, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.437911, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "This(O) is(O) the(O) method(O) used(O) by(O) Bands(B-organization) of(I-organization) America(I-organization),(O) the(O) Indiana(B-organization) State(I-organization) School(I-organization) Music(I-organization) Association(I-organization),(O) Kentucky(B-organization) Music(I-organization) Educators(I-organization) Association(I-organization) and(O) the(O) University(B-organization) Interscholastic(I-organization) League(I-organization).(O)"}
{"id": "84", "dataset": "crossner_music", "split": "dev", "instance": {"id": "84", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: country, organization, person, location, music genre, song, musical instrument, album, musical artist, award, event, band and O.\nSentence: Other acts who became prominent in the alt-country genre during the 1990s and 2000s included The Bottle Rockets , The Handsome Family , Blue Mountain , Robbie Fulks , Blood Oranges , Bright Eyes , Drive-By Truckers , Old 97 's , Old Crow Medicine Show , Nickel Creek , Neko Case , and Whiskeytown , whose lead singer Ryan Adams later had a successful solo-career .", "prompt_labels": "Other(O) acts(O) who(O) became(O) prominent(O) in(O) the(O) alt-country(B-music genre) genre(I-music genre) during(O) the(O) 1990s(O) and(O) 2000s(O) included(O) The(B-band) Bottle(I-band) Rockets(I-band) ,(O) The(B-band) Handsome(I-band) Family(I-band) ,(O) Blue(B-band) Mountain(I-band) ,(O) Robbie(B-band) Fulks(I-band) ,(O) Blood(B-band) Oranges(I-band) ,(O) Bright(B-band) Eyes(I-band) ,(O) Drive-By(B-band) Truckers(I-band) ,(O) Old(B-band) 97(I-band) 's(I-band) ,(O) Old(B-band) Crow(I-band) Medicine(I-band) Show(I-band) ,(O) Nickel(B-band) Creek(I-band) ,(O) Neko(B-musical artist) Case(I-musical artist) ,(O) and(O) Whiskeytown(B-band) ,(O) whose(O) lead(O) singer(O) Ryan(B-musical artist) Adams(I-musical artist) later(O) had(O) a(O) successful(O) solo-career(O) .(O)", "words": ["Other", "acts", "who", "became", "prominent", "in", "the", "alt-country", "genre", "during", "the", "1990s", "and", "2000s", "included", "The", "Bottle", "Rockets", ",", "The", "Handsome", "Family", ",", "Blue", "Mountain", ",", "Robbie", "Fulks", ",", "Blood", "Oranges", ",", "Bright", "Eyes", ",", "Drive-By", "Truckers", ",", "Old", "97", "'s", ",", "Old", "Crow", "Medicine", "Show", ",", "Nickel", "Creek", ",", "Neko", "Case", ",", "and", "Whiskeytown", ",", "whose", "lead", "singer", "Ryan", "Adams", "later", "had", "a", "successful", "solo-career", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "B-music genre", "I-music genre", "O", "O", "O", "O", "O", "O", "B-band", "I-band", "I-band", "O", "B-band", "I-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "I-band", "O", "B-band", "I-band", "I-band", "I-band", "O", "B-band", "I-band", "O", "B-musical artist", "I-musical artist", "O", "O", "B-band", "O", "O", "O", "O", "B-musical artist", "I-musical artist", "O", "O", "O", "O", "O", "O"]}, "label_list": ["country", "organization", "person", "location", "music genre", "song", "musical instrument", "album", "musical artist", "award", "event", "band"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 684, 6, 1470, 6, 568, 6, 1128, 6, 723, 5349, 6, 2324, 6, 4183, 5009, 6, 2306, 6, 4183, 2377, 6, 2760, 6, 605, 6, 1928, 11, 411, 5, 4892, 17, 1433, 10, 2502, 6775, 113, 1632, 8304, 16, 8, 4445, 18, 17529, 5349, 383, 8, 5541, 7, 11, 2766, 7, 1285, 37, 25921, 22176, 7, 3, 6, 37, 2263, 5529, 3712, 3, 6, 2419, 5617, 3, 6, 5376, 4232, 17978, 157, 7, 3, 6, 12737, 7311, 7, 3, 6, 17557, 9172, 7, 3, 6, 5894, 18, 279, 63, 14049, 277, 3, 6, 3525, 3, 4327, 3, 31, 7, 3, 6, 3525, 15343, 6852, 3111, 3, 6, 29005, 7682, 3, 6, 445, 20065, 6320, 3, 6, 11, 22290, 15, 63, 3540, 3, 6, 3, 2544, 991, 7634, 7826, 14274, 865, 141, 3, 9, 1574, 6729, 18, 2864, 49, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.438844, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Other(O) acts(O) who(O) became(O) prominent(O) in(O) the(O) alt-country(B-music genre) genre(O) during(O) the(O) 1990s(O) and(O) 2000s(O) included(O) The(B-band) Bottle(I-band) Rockets(I-band),(O) The(B-band) Handsome(I-band) Family(I-band),(O) Blue(B-band) Mountain(I-band),(O) Robbie(B-band) Fulks(I-band),(O) Blood(B-band) Oranges(I-band),(O) Bright(B-band) Eyes(I-band),(O) Drive-By(B-band) Truckers(I-band),(O) Old(B-band) 97(I-band)'s(I-band),(O) Old(B-band) Crow(I-band) Medicine(I-band) Show(I-band),(O) Nickel(B-band) Creek(I-band),(O) Neko(B-band) Case(I-band),(O) and(O) Whiskeytown(B-band),(O) whose(O) lead(O) singer(O) Ryan(B-musical artist) Adams(I-musical artist) later(O) had(O) a(O) successful(O) solo-career(O).(O)"}
{"id": "160", "dataset": "crossner_music", "split": "dev", "instance": {"id": "160", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: song, musical artist, country, award, musical instrument, event, band, person, organization, music genre, location, album and O.\nSentence: The album also features appearances by Damian Marley , son of Bob Marley , Prodigy of Mobb Deep and producers the Alchemist and Fredwreck .", "prompt_labels": "The(O) album(O) also(O) features(O) appearances(O) by(O) Damian(B-musical artist) Marley(I-musical artist) ,(O) son(O) of(O) Bob(B-person) Marley(I-person) ,(O) Prodigy(B-musical artist) of(O) Mobb(B-band) Deep(I-band) and(O) producers(O) the(B-musical artist) Alchemist(I-musical artist) and(O) Fredwreck(B-musical artist) .(O)", "words": ["The", "album", "also", "features", "appearances", "by", "Damian", "Marley", ",", "son", "of", "Bob", "Marley", ",", "Prodigy", "of", "Mobb", "Deep", "and", "producers", "the", "Alchemist", "and", "Fredwreck", "."], "labels": ["O", "O", "O", "O", "O", "O", "B-musical artist", "I-musical artist", "O", "O", "O", "B-person", "I-person", "O", "B-musical artist", "O", "B-band", "I-band", "O", "O", "B-musical artist", "I-musical artist", "O", "B-musical artist", "O"]}, "label_list": ["song", "musical artist", "country", "award", "musical instrument", "event", "band", "person", "organization", "music genre", "location", "album"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2324, 6, 4183, 2377, 6, 684, 6, 2760, 6, 4183, 5009, 6, 605, 6, 1928, 6, 568, 6, 1470, 6, 723, 5349, 6, 1128, 6, 2306, 11, 411, 5, 4892, 17, 1433, 10, 37, 2306, 92, 753, 3179, 7, 57, 9235, 152, 1571, 1306, 3, 6, 520, 13, 5762, 1571, 1306, 3, 6, 749, 5572, 63, 13, 1290, 115, 115, 9509, 11, 10850, 8, 901, 6482, 343, 11, 12264, 210, 60, 2406, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.439434, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) album(O) also(O) features(O) appearances(O) by(O) Damian(B-musical artist) Marley(I-musical artist),(O) son(O) of(O) Bob(B-musical artist) Marley(I-musical artist),(O) Prodigy(B-musical artist) of(O) Mobb(B-band) Deep(I-band) and(O) producers(O) the(O) Alchemist(B-musical artist) and(O) Fredwreck(B-musical artist).(O)"}
{"id": "162", "dataset": "crossner_music", "split": "dev", "instance": {"id": "162", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: country, song, organization, event, person, album, musical instrument, award, location, band, music genre, musical artist and O.\nSentence: Rebana is a Malay tambourine that is used in Islamic devotional music in Southeast Asia , particularly in Indonesia , Malaysia , Brunei , and Singapore .", "prompt_labels": "Rebana(B-musical instrument) is(O) a(O) Malay(B-musical instrument) tambourine(I-musical instrument) that(O) is(O) used(O) in(O) Islamic(B-music genre) devotional(I-music genre) music(I-music genre) in(O) Southeast(B-location) Asia(B-location) ,(O) particularly(O) in(O) Indonesia(B-country) ,(O) Malaysia(B-country) ,(O) Brunei(B-country) ,(O) and(O) Singapore(B-country) .(O)", "words": ["Rebana", "is", "a", "Malay", "tambourine", "that", "is", "used", "in", "Islamic", "devotional", "music", "in", "Southeast", "Asia", ",", "particularly", "in", "Indonesia", ",", "Malaysia", ",", "Brunei", ",", "and", "Singapore", "."], "labels": ["B-musical instrument", "O", "O", "B-musical instrument", "I-musical instrument", "O", "O", "O", "O", "B-music genre", "I-music genre", "I-music genre", "O", "B-location", "B-location", "O", "O", "O", "B-country", "O", "B-country", "O", "B-country", "O", "O", "B-country", "O"]}, "label_list": ["country", "song", "organization", "event", "person", "album", "musical instrument", "award", "location", "band", "music genre", "musical artist"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 684, 6, 2324, 6, 1470, 6, 605, 6, 568, 6, 2306, 6, 4183, 5009, 6, 2760, 6, 1128, 6, 1928, 6, 723, 5349, 6, 4183, 2377, 11, 411, 5, 4892, 17, 1433, 10, 419, 3478, 9, 19, 3, 9, 2148, 9, 63, 30738, 1211, 630, 24, 19, 261, 16, 11117, 20771, 138, 723, 16, 18862, 3826, 3, 6, 1989, 16, 9995, 3, 6, 10155, 3, 6, 16399, 15, 23, 3, 6, 11, 6243, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.440033, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Rebana(B-musical instrument) is(O) a(O) Malay(B-music genre) tambourine(I-musical instrument) that(O) is(O) used(O) in(O) Islamic(B-music genre) devotional(I-music genre) music(I-music genre) in(O) Southeast(B-location) Asia(I-location),(O) particularly(O) in(O) Indonesia(B-location),(O) Malaysia(B-location),(O) Brunei(B-location),(O) and(O) Singapore(B-location).(O)"}
{"id": "167", "dataset": "crossner_music", "split": "dev", "instance": {"id": "167", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: album, organization, country, music genre, award, location, band, song, musical instrument, musical artist, event, person and O.\nSentence: It is generally divided into two major subgenres , with the jazz -influenced New Orleans blues based on the musical traditions of that city and the slower tempo swamp blues incorporating influences from zydeco and Cajun music from around Baton Rouge .", "prompt_labels": "It(O) is(O) generally(O) divided(O) into(O) two(O) major(O) subgenres(O) ,(O) with(O) the(O) jazz(B-music genre) -influenced(O) New(B-music genre) Orleans(I-music genre) blues(I-music genre) based(O) on(O) the(O) musical(O) traditions(O) of(O) that(O) city(O) and(O) the(O) slower(O) tempo(O) swamp(B-music genre) blues(I-music genre) incorporating(O) influences(O) from(O) zydeco(B-music genre) and(O) Cajun(B-music genre) music(I-music genre) from(O) around(O) Baton(B-location) Rouge(I-location) .(O)", "words": ["It", "is", "generally", "divided", "into", "two", "major", "subgenres", ",", "with", "the", "jazz", "-influenced", "New", "Orleans", "blues", "based", "on", "the", "musical", "traditions", "of", "that", "city", "and", "the", "slower", "tempo", "swamp", "blues", "incorporating", "influences", "from", "zydeco", "and", "Cajun", "music", "from", "around", "Baton", "Rouge", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-music genre", "O", "B-music genre", "I-music genre", "I-music genre", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-music genre", "I-music genre", "O", "O", "O", "B-music genre", "O", "B-music genre", "I-music genre", "O", "O", "B-location", "I-location", "O"]}, "label_list": ["album", "organization", "country", "music genre", "award", "location", "band", "song", "musical instrument", "musical artist", "event", "person"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2306, 6, 1470, 6, 684, 6, 723, 5349, 6, 2760, 6, 1128, 6, 1928, 6, 2324, 6, 4183, 5009, 6, 4183, 2377, 6, 605, 6, 568, 11, 411, 5, 4892, 17, 1433, 10, 94, 19, 2389, 8807, 139, 192, 779, 769, 729, 60, 7, 3, 6, 28, 8, 9948, 3, 18, 12913, 368, 14433, 1692, 7, 3, 390, 30, 8, 4183, 10822, 13, 24, 690, 11, 8, 17553, 3, 13089, 28945, 1692, 7, 3, 18218, 14780, 45, 3, 4164, 221, 509, 11, 1336, 6959, 723, 45, 300, 8897, 106, 23777, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.44072, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "It(O) is(O) generally(O) divided(O) into(O) two(O) major(O) subgenres(O),(O) with(O) the(O) jazz(B-music genre) -influenced(O) New(B-location) Orleans(I-location) blues(I-music genre) based(O) on(O) the(O) musical(O) traditions(O) of(O) that(O) city(O) and(O) the(O) slower(O) tempo(O) swamp(B-music genre) blues(I-music genre) incorporating(O) influences(O) from(O) zydeco(B-music genre) and(O) Cajun(B-music genre) music(O) from(O) around(O) Baton(B-location) Rouge(I-location).(O)"}
{"id": "207", "dataset": "crossner_music", "split": "dev", "instance": {"id": "207", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: music genre, country, organization, album, musical instrument, band, song, person, award, event, musical artist, location and O.\nSentence: In the twentieth century , Christian music has developed to reflect the emergence of a diverse array of musical genres including Rock music , metal , Pop music , jazz , Contemporary Christian music , rap , spiritual , Country music , blues , and Gospel music .", "prompt_labels": "In(O) the(O) twentieth(O) century(O) ,(O) Christian(B-music genre) music(I-music genre) has(O) developed(O) to(O) reflect(O) the(O) emergence(O) of(O) a(O) diverse(O) array(O) of(O) musical(O) genres(O) including(O) Rock(B-music genre) music(I-music genre) ,(O) metal(B-music genre) ,(O) Pop(B-music genre) music(I-music genre) ,(O) jazz(B-music genre) ,(O) Contemporary(B-music genre) Christian(I-music genre) music(I-music genre) ,(O) rap(B-music genre) ,(O) spiritual(B-music genre) ,(O) Country(B-music genre) music(I-music genre) ,(O) blues(B-music genre) ,(O) and(O) Gospel(B-music genre) music(I-music genre) .(O)", "words": ["In", "the", "twentieth", "century", ",", "Christian", "music", "has", "developed", "to", "reflect", "the", "emergence", "of", "a", "diverse", "array", "of", "musical", "genres", "including", "Rock", "music", ",", "metal", ",", "Pop", "music", ",", "jazz", ",", "Contemporary", "Christian", "music", ",", "rap", ",", "spiritual", ",", "Country", "music", ",", "blues", ",", "and", "Gospel", "music", "."], "labels": ["O", "O", "O", "O", "O", "B-music genre", "I-music genre", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-music genre", "I-music genre", "O", "B-music genre", "O", "B-music genre", "I-music genre", "O", "B-music genre", "O", "B-music genre", "I-music genre", "I-music genre", "O", "B-music genre", "O", "B-music genre", "O", "B-music genre", "I-music genre", "O", "B-music genre", "O", "O", "B-music genre", "I-music genre", "O"]}, "label_list": ["music genre", "country", "organization", "album", "musical instrument", "band", "song", "person", "award", "event", "musical artist", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 723, 5349, 6, 684, 6, 1470, 6, 2306, 6, 4183, 5009, 6, 1928, 6, 2324, 6, 568, 6, 2760, 6, 605, 6, 4183, 2377, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 86, 8, 28985, 2646, 3, 6, 2826, 723, 65, 1597, 12, 3548, 8, 3, 25120, 13, 3, 9, 2399, 5590, 13, 4183, 5349, 7, 379, 3120, 723, 3, 6, 1946, 3, 6, 5777, 723, 3, 6, 9948, 3, 6, 16590, 2826, 723, 3, 6, 3, 5846, 3, 6, 3428, 3, 6, 6993, 723, 3, 6, 1692, 7, 3, 6, 11, 15654, 723, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.441417, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) the(O) twentieth(O) century(O),(O) Christian(B-music genre) music(I-music genre) has(O) developed(O) to(O) reflect(O) the(O) emergence(O) of(O) a(O) diverse(O) array(O) of(O) musical(O) genres(O) including(O) Rock(B-music genre) music(I-music genre),(O) metal(B-music genre),(O) Pop(B-music genre) music(I-music genre),(O) jazz(B-music genre),(O) Contemporary(B-music genre) Christian(I-music genre) music(I-music genre),(O) rap(B-music genre),(O) spiritual(B-music genre),(O) Country(B-music genre) music(I-music genre),(O) blues(B-music genre),(O) and(O) Gospel(B-music genre) music(I-music genre).(O)"}
{"id": "219", "dataset": "crossner_music", "split": "dev", "instance": {"id": "219", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: album, musical artist, location, musical instrument, person, band, organization, country, event, song, award, music genre and O.\nSentence: In 1968 , three of the genre 's most famous pioneers , Led Zeppelin , Black Sabbath and Deep Purple were founded .", "prompt_labels": "In(O) 1968(O) ,(O) three(O) of(O) the(O) genre(O) 's(O) most(O) famous(O) pioneers(O) ,(O) Led(B-band) Zeppelin(I-band) ,(O) Black(B-band) Sabbath(I-band) and(O) Deep(B-band) Purple(I-band) were(O) founded(O) .(O)", "words": ["In", "1968", ",", "three", "of", "the", "genre", "'s", "most", "famous", "pioneers", ",", "Led", "Zeppelin", ",", "Black", "Sabbath", "and", "Deep", "Purple", "were", "founded", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "B-band", "I-band", "O", "O", "O"]}, "label_list": ["album", "musical artist", "location", "musical instrument", "person", "band", "organization", "country", "event", "song", "award", "music genre"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2306, 6, 4183, 2377, 6, 1128, 6, 4183, 5009, 6, 568, 6, 1928, 6, 1470, 6, 684, 6, 605, 6, 2324, 6, 2760, 6, 723, 5349, 11, 411, 5, 4892, 17, 1433, 10, 86, 16506, 3, 6, 386, 13, 8, 5349, 3, 31, 7, 167, 2581, 11200, 7, 3, 6, 312, 26, 4603, 6811, 40, 77, 3, 6, 1589, 11315, 3697, 107, 11, 9509, 21834, 130, 5710, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.441953, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 1968(O),(O) three(O) of(O) the(O) genre(O)'s(O) most(O) famous(O) pioneers(O),(O) Led(B-band) Zeppelin(I-band),(O) Black(B-band) Sabbath(I-band) and(O) Deep(B-band) Purple(I-band) were(O) founded(O).(O)"}
{"id": "320", "dataset": "crossner_music", "split": "dev", "instance": {"id": "320", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: song, country, person, location, organization, award, music genre, musical artist, musical instrument, album, band, event and O.\nSentence: Etta James ( born Jamesetta Hawkins ; January 25 , 1938 - January 20 , 2012 ) was an American singer who performed in various genres , including blues , Rhythm and blues , Soul music , rock and roll , jazz and Gospel music .", "prompt_labels": "Etta(B-musical artist) James(I-musical artist) ((O) born(O) Jamesetta(B-musical artist) Hawkins(I-musical artist) ;(O) January(O) 25(O) ,(O) 1938(O) -(O) January(O) 20(O) ,(O) 2012(O) )(O) was(O) an(O) American(O) singer(O) who(O) performed(O) in(O) various(O) genres(O) ,(O) including(O) blues(B-music genre) ,(O) Rhythm(B-music genre) and(I-music genre) blues(I-music genre) ,(O) Soul(B-music genre) music(I-music genre) ,(O) rock(B-music genre) and(I-music genre) roll(I-music genre) ,(O) jazz(B-music genre) and(O) Gospel(B-music genre) music(I-music genre) .(O)", "words": ["Etta", "James", "(", "born", "Jamesetta", "Hawkins", ";", "January", "25", ",", "1938", "-", "January", "20", ",", "2012", ")", "was", "an", "American", "singer", "who", "performed", "in", "various", "genres", ",", "including", "blues", ",", "Rhythm", "and", "blues", ",", "Soul", "music", ",", "rock", "and", "roll", ",", "jazz", "and", "Gospel", "music", "."], "labels": ["B-musical artist", "I-musical artist", "O", "O", "B-musical artist", "I-musical artist", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-music genre", "O", "B-music genre", "I-music genre", "I-music genre", "O", "B-music genre", "I-music genre", "O", "B-music genre", "I-music genre", "I-music genre", "O", "B-music genre", "O", "B-music genre", "I-music genre", "O"]}, "label_list": ["song", "country", "person", "location", "organization", "award", "music genre", "musical artist", "musical instrument", "album", "band", "event"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2324, 6, 684, 6, 568, 6, 1128, 6, 1470, 6, 2760, 6, 723, 5349, 6, 4183, 2377, 6, 4183, 5009, 6, 2306, 6, 1928, 6, 605, 11, 411, 5, 4892, 17, 1433, 10, 1754, 17, 9, 2549, 41, 2170, 2549, 10669, 12833, 77, 7, 3, 117, 1762, 944, 3, 6, 25745, 3, 18, 1762, 460, 3, 6, 1673, 3, 61, 47, 46, 797, 7634, 113, 3032, 16, 796, 5349, 7, 3, 6, 379, 1692, 7, 3, 6, 3, 27224, 11, 1692, 7, 3, 6, 13759, 723, 3, 6, 2480, 11, 3812, 3, 6, 9948, 11, 15654, 723, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.442622, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Etta(B-musical artist) James(I-musical artist) ((O) born(O) Jamesetta(B-person) Hawkins(I-person) ;(O) January(O) 25(O),(O) 1938(O) -(O) January(O) 20(O),(O) 2012(O) )(O) was(O) an(O) American(B-country) singer(O) who(O) performed(O) in(O) various(O) genres(O),(O) including(O) blues(B-music genre),(O) Rhythm(B-music genre) and(I-music genre) blues(I-music genre),(O) Soul(B-music genre) music(I-music genre),(O) rock(B-music genre) and(I-music genre) roll(I-music genre),(O) jazz(B-music genre) and(O) Gospel(B-music genre) music(I-music genre).(O)"}
{"id": "325", "dataset": "crossner_music", "split": "dev", "instance": {"id": "325", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: country, event, album, musical instrument, band, musical artist, song, organization, music genre, location, person, award and O.\nSentence: Stock Aitken Waterman ( SAW ) expensively-produced productions for Mel and Kim , including the number-one hit Respectable , added elements of house to their previous Europop sound .", "prompt_labels": "Stock(B-band) Aitken(I-band) Waterman(I-band) ((O) SAW(B-band) )(O) expensively-produced(O) productions(O) for(O) Mel(B-band) and(I-band) Kim(I-band) ,(O) including(O) the(O) number-one(O) hit(O) Respectable(B-song) ,(O) added(O) elements(O) of(O) house(B-music genre) to(O) their(O) previous(O) Europop(B-music genre) sound(O) .(O)", "words": ["Stock", "Aitken", "Waterman", "(", "SAW", ")", "expensively-produced", "productions", "for", "Mel", "and", "Kim", ",", "including", "the", "number-one", "hit", "Respectable", ",", "added", "elements", "of", "house", "to", "their", "previous", "Europop", "sound", "."], "labels": ["B-band", "I-band", "I-band", "O", "B-band", "O", "O", "O", "O", "B-band", "I-band", "I-band", "O", "O", "O", "O", "O", "B-song", "O", "O", "O", "O", "B-music genre", "O", "O", "O", "B-music genre", "O", "O"]}, "label_list": ["country", "event", "album", "musical instrument", "band", "musical artist", "song", "organization", "music genre", "location", "person", "award"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 684, 6, 605, 6, 2306, 6, 4183, 5009, 6, 1928, 6, 4183, 2377, 6, 2324, 6, 1470, 6, 723, 5349, 6, 1128, 6, 568, 6, 2760, 11, 411, 5, 4892, 17, 1433, 10, 6394, 71, 155, 2217, 2336, 348, 41, 180, 9851, 3, 61, 2881, 120, 18, 29462, 999, 7, 21, 5049, 11, 6777, 3, 6, 379, 8, 381, 18, 782, 1560, 26795, 179, 3, 6, 974, 2479, 13, 629, 12, 70, 1767, 2430, 9791, 1345, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.443263, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Stock(B-musical artist) Aitken(I-musical artist) Waterman(I-musical artist) ((O) SAW(B-band) )(O) expensively-produced(O) productions(O) for(O) Mel(B-person) and(O) Kim(B-person),(O) including(O) the(O) number-one(O) hit(O) Respectable(B-song),(O) added(O) elements(O) of(O) house(B-music genre) to(O) their(O) previous(O) Europop(B-music genre) sound(O).(O)"}
{"id": "337", "dataset": "crossner_music", "split": "dev", "instance": {"id": "337", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, musical instrument, organization, band, person, country, musical artist, album, music genre, song, event, award and O.\nSentence: Other groups in the British grindcore scene , such as Heresy and Unseen Terror , have emphasized the influence of American hardcore punk , including Septic Death , as well as Swedish D-beat .", "prompt_labels": "Other(O) groups(O) in(O) the(O) British(O) grindcore(B-music genre) scene(O) ,(O) such(O) as(O) Heresy(B-band) and(O) Unseen(B-band) Terror(I-band) ,(O) have(O) emphasized(O) the(O) influence(O) of(O) American(O) hardcore(B-music genre) punk(I-music genre) ,(O) including(O) Septic(B-band) Death(I-band) ,(O) as(O) well(O) as(O) Swedish(O) D-beat(B-music genre) .(O)", "words": ["Other", "groups", "in", "the", "British", "grindcore", "scene", ",", "such", "as", "Heresy", "and", "Unseen", "Terror", ",", "have", "emphasized", "the", "influence", "of", "American", "hardcore", "punk", ",", "including", "Septic", "Death", ",", "as", "well", "as", "Swedish", "D-beat", "."], "labels": ["O", "O", "O", "O", "O", "B-music genre", "O", "O", "O", "O", "B-band", "O", "B-band", "I-band", "O", "O", "O", "O", "O", "O", "O", "B-music genre", "I-music genre", "O", "O", "B-band", "I-band", "O", "O", "O", "O", "O", "B-music genre", "O"]}, "label_list": ["location", "musical instrument", "organization", "band", "person", "country", "musical artist", "album", "music genre", "song", "event", "award"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 4183, 5009, 6, 1470, 6, 1928, 6, 568, 6, 684, 6, 4183, 2377, 6, 2306, 6, 723, 5349, 6, 2324, 6, 605, 6, 2760, 11, 411, 5, 4892, 17, 1433, 10, 2502, 1637, 16, 8, 2390, 20743, 9022, 3112, 3, 6, 224, 38, 947, 7, 63, 11, 597, 7, 15, 35, 332, 17262, 3, 6, 43, 3, 25472, 8, 2860, 13, 797, 614, 9022, 4930, 157, 3, 6, 379, 180, 14629, 12358, 3, 6, 38, 168, 38, 16531, 309, 18, 12745, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.443902, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Other(O) groups(O) in(O) the(O) British(B-country) grindcore(B-music genre) scene(O),(O) such(O) as(O) Heresy(B-band) and(O) Unseen(B-band) Terror(I-band),(O) have(O) emphasized(O) the(O) influence(O) of(O) American(B-country) hardcore(B-music genre) punk(I-music genre),(O) including(O) Septic(B-band) Death(I-band),(O) as(O) well(O) as(O) Swedish(B-country) D-beat(B-band).(O)"}
{"id": "41", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "41", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: election, political party, organization, country, location, politician, person, event and O.\nSentence: In 1990 Australian federal election Caldicott unsuccessfully contested the House of Representatives New South Wales seat of Richmond , a seat held since the inaugural 1901 Australian federal election by conservatives , and by the National Party of Australia since it first contested elections at the 1922 Australian federal election .", "prompt_labels": "In(O) 1990(B-election) Australian(I-election) federal(I-election) election(I-election) Caldicott(O) unsuccessfully(O) contested(O) the(O) House(B-organization) of(I-organization) Representatives(I-organization) New(I-organization) South(I-organization) Wales(I-organization) seat(O) of(O) Richmond(B-location) ,(O) a(O) seat(O) held(O) since(O) the(O) inaugural(O) 1901(B-election) Australian(I-election) federal(I-election) election(I-election) by(O) conservatives(O) ,(O) and(O) by(O) the(O) National(B-political party) Party(I-political party) of(I-political party) Australia(I-political party) since(O) it(O) first(O) contested(O) elections(O) at(O) the(O) 1922(B-election) Australian(I-election) federal(I-election) election(I-election) .(O)", "words": ["In", "1990", "Australian", "federal", "election", "Caldicott", "unsuccessfully", "contested", "the", "House", "of", "Representatives", "New", "South", "Wales", "seat", "of", "Richmond", ",", "a", "seat", "held", "since", "the", "inaugural", "1901", "Australian", "federal", "election", "by", "conservatives", ",", "and", "by", "the", "National", "Party", "of", "Australia", "since", "it", "first", "contested", "elections", "at", "the", "1922", "Australian", "federal", "election", "."], "labels": ["O", "B-election", "I-election", "I-election", "I-election", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "O", "B-location", "O", "O", "O", "O", "O", "O", "O", "B-election", "I-election", "I-election", "I-election", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "I-political party", "I-political party", "O", "O", "O", "O", "O", "O", "O", "B-election", "I-election", "I-election", "I-election", "O"]}, "label_list": ["election", "political party", "organization", "country", "location", "politician", "person", "event"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 4356, 6, 1827, 1088, 6, 1470, 6, 684, 6, 1128, 6, 24694, 6, 568, 6, 605, 11, 411, 5, 4892, 17, 1433, 10, 86, 5541, 3746, 2822, 4356, 3104, 26, 23, 10405, 26684, 120, 3, 29365, 8, 1384, 13, 13517, 7, 368, 1013, 10256, 3143, 13, 17247, 3, 6, 3, 9, 3143, 1213, 437, 8, 22145, 29360, 3746, 2822, 4356, 57, 11252, 7, 3, 6, 11, 57, 8, 868, 3450, 13, 2051, 437, 34, 166, 3, 29365, 9768, 44, 8, 957, 2884, 3746, 2822, 4356, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.444656, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 1990(O) Australian(B-event) federal(I-event) election(I-event) Caldicott(O) unsuccessfully(O) contested(O) the(O) House(B-organization) of(I-organization) Representatives(I-organization) New(B-location) South(I-location) Wales(I-location) seat(O) of(O) Richmond(B-location),(O) a(O) seat(O) held(O) since(O) the(O) inaugural(O) 1901(B-event) Australian(I-event) federal(I-event) election(I-event) by(O) conservatives(B-political party),(O) and(O) by(O) the(O) National(B-political party) Party(I-political party) of(I-political party) Australia(I-political party) since(O) it(O) first(O) contested(O) elections(O) at(O) the(O) 1922(B-event) Australian(I-event) federal(I-event) election(I-event).(O)"}
{"id": "61", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "61", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, event, organization, person, election, political party, politician, country and O.\nSentence: The UUP had their best result in the election , in part due to no candidate from either the UK Unionist Party or Northern Ireland Unionist Party defending one of the seats won in 1998 Northern Ireland Assembly election .", "prompt_labels": "The(O) UUP(B-political party) had(O) their(O) best(O) result(O) in(O) the(O) election(O) ,(O) in(O) part(O) due(O) to(O) no(O) candidate(O) from(O) either(O) the(O) UK(B-political party) Unionist(I-political party) Party(I-political party) or(O) Northern(B-political party) Ireland(I-political party) Unionist(I-political party) Party(I-political party) defending(O) one(O) of(O) the(O) seats(O) won(O) in(O) 1998(B-election) Northern(I-election) Ireland(I-election) Assembly(I-election) election(I-election) .(O)", "words": ["The", "UUP", "had", "their", "best", "result", "in", "the", "election", ",", "in", "part", "due", "to", "no", "candidate", "from", "either", "the", "UK", "Unionist", "Party", "or", "Northern", "Ireland", "Unionist", "Party", "defending", "one", "of", "the", "seats", "won", "in", "1998", "Northern", "Ireland", "Assembly", "election", "."], "labels": ["O", "B-political party", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "I-political party", "O", "B-political party", "I-political party", "I-political party", "I-political party", "O", "O", "O", "O", "O", "O", "O", "B-election", "I-election", "I-election", "I-election", "I-election", "O"]}, "label_list": ["location", "event", "organization", "person", "election", "political party", "politician", "country"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 605, 6, 1470, 6, 568, 6, 4356, 6, 1827, 1088, 6, 24694, 6, 684, 11, 411, 5, 4892, 17, 1433, 10, 37, 412, 6880, 141, 70, 200, 741, 16, 8, 4356, 3, 6, 16, 294, 788, 12, 150, 4775, 45, 893, 8, 1270, 3545, 343, 3450, 42, 5961, 5316, 3545, 343, 3450, 3, 20309, 80, 13, 8, 6116, 751, 16, 6260, 5961, 5316, 11993, 4356, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.445256, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) UUP(B-political party) had(O) their(O) best(O) result(O) in(O) the(O) election(O),(O) in(O) part(O) due(O) to(O) no(O) candidate(O) from(O) either(O) the(O) UK(B-political party) Unionist(I-political party) Party(I-political party) or(O) Northern(B-political party) Ireland(I-political party) Unionist(I-political party) Party(I-political party) defending(O) one(O) of(O) the(O) seats(O) won(O) in(O) 1998(B-event) Northern(I-event) Ireland(I-event) Assembly(I-event) election(I-event).(O)"}
{"id": "64", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "64", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: political party, organization, person, location, event, country, politician, election and O.\nSentence: Whereas elsewhere there are effectively three fundamental battles fought in elections - between the Ulster Unionist Party and the Democratic Unionist Party to be the leading unionist party , between the Social Democratic and Labour Party and Sinn F\u00e9in to be the leading nationalist party , and between unionism and nationalism as a whole , North Down is different .", "prompt_labels": "Whereas(O) elsewhere(O) there(O) are(O) effectively(O) three(O) fundamental(O) battles(O) fought(O) in(O) elections(O) -(O) between(O) the(O) Ulster(B-political party) Unionist(I-political party) Party(I-political party) and(O) the(O) Democratic(B-political party) Unionist(I-political party) Party(I-political party) to(O) be(O) the(O) leading(O) unionist(B-political party) party(I-political party) ,(O) between(O) the(O) Social(B-political party) Democratic(I-political party) and(I-political party) Labour(I-political party) Party(I-political party) and(O) Sinn(B-political party) F\u00e9in(I-political party) to(O) be(O) the(O) leading(O) nationalist(B-political party) party(I-political party) ,(O) and(O) between(O) unionism(O) and(O) nationalism(O) as(O) a(O) whole(O) ,(O) North(B-location) Down(I-location) is(O) different(O) .(O)", "words": ["Whereas", "elsewhere", "there", "are", "effectively", "three", "fundamental", "battles", "fought", "in", "elections", "-", "between", "the", "Ulster", "Unionist", "Party", "and", "the", "Democratic", "Unionist", "Party", "to", "be", "the", "leading", "unionist", "party", ",", "between", "the", "Social", "Democratic", "and", "Labour", "Party", "and", "Sinn", "F\u00e9in", "to", "be", "the", "leading", "nationalist", "party", ",", "and", "between", "unionism", "and", "nationalism", "as", "a", "whole", ",", "North", "Down", "is", "different", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "I-political party", "O", "O", "B-political party", "I-political party", "I-political party", "O", "O", "O", "O", "B-political party", "I-political party", "O", "O", "O", "B-political party", "I-political party", "I-political party", "I-political party", "I-political party", "O", "B-political party", "I-political party", "O", "O", "O", "O", "B-political party", "I-political party", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-location", "I-location", "O", "O", "O"]}, "label_list": ["political party", "organization", "person", "location", "event", "country", "politician", "election"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1827, 1088, 6, 1470, 6, 568, 6, 1128, 6, 605, 6, 684, 6, 24694, 6, 4356, 11, 411, 5, 4892, 17, 1433, 10, 2840, 9, 7, 8975, 132, 33, 3762, 386, 4431, 3392, 7, 3, 13973, 16, 9768, 3, 18, 344, 8, 10150, 1370, 3545, 343, 3450, 11, 8, 10021, 3545, 343, 3450, 12, 36, 8, 1374, 7021, 343, 1088, 3, 6, 344, 8, 2730, 10021, 11, 16117, 3450, 11, 17909, 377, 154, 77, 12, 36, 8, 1374, 1157, 343, 1088, 3, 6, 11, 344, 73, 28740, 11, 2982, 6835, 38, 3, 9, 829, 3, 6, 1117, 7309, 19, 315, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.446003, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Whereas(O) elsewhere(O) there(O) are(O) effectively(O) three(O) fundamental(O) battles(O) fought(O) in(O) elections(O) -(O) between(O) the(O) Ulster(B-political party) Unionist(I-political party) Party(I-political party) and(O) the(O) Democratic(B-political party) Unionist(I-political party) Party(I-political party) to(O) be(O) the(O) leading(O) unionist(O) party(O),(O) between(O) the(O) Social(B-political party) Democratic(I-political party) and(O) Labour(B-political party) Party(I-political party) and(O) Sinn(B-political party) F\u00e9in(I-political party) to(O) be(O) the(O) leading(O) nationalist(O) party(O),(O) and(O) between(O) unionism(O) and(O) nationalism(O) as(O) a(O) whole(O),(O) North(B-location) Down(I-location) is(O) different(O).(O)"}
{"id": "69", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "69", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, election, politician, political party, country, event, organization, person and O.\nSentence: However , with the onset of the Troubles , new parties emerged that appealed to the party 's support base , including the Social Democratic and Labour Party ( SDLP ) , the Alliance Party of Northern Ireland and the Democratic Unionist Party .", "prompt_labels": "However(O) ,(O) with(O) the(O) onset(O) of(O) the(B-event) Troubles(I-event) ,(O) new(O) parties(O) emerged(O) that(O) appealed(O) to(O) the(O) party(O) 's(O) support(O) base(O) ,(O) including(O) the(O) Social(B-political party) Democratic(I-political party) and(I-political party) Labour(I-political party) Party(I-political party) ((O) SDLP(B-political party) )(O) ,(O) the(O) Alliance(B-political party) Party(I-political party) of(I-political party) Northern(I-political party) Ireland(I-political party) and(O) the(O) Democratic(B-political party) Unionist(I-political party) Party(I-political party) .(O)", "words": ["However", ",", "with", "the", "onset", "of", "the", "Troubles", ",", "new", "parties", "emerged", "that", "appealed", "to", "the", "party", "'s", "support", "base", ",", "including", "the", "Social", "Democratic", "and", "Labour", "Party", "(", "SDLP", ")", ",", "the", "Alliance", "Party", "of", "Northern", "Ireland", "and", "the", "Democratic", "Unionist", "Party", "."], "labels": ["O", "O", "O", "O", "O", "O", "B-event", "I-event", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "I-political party", "I-political party", "I-political party", "O", "B-political party", "O", "O", "O", "B-political party", "I-political party", "I-political party", "I-political party", "I-political party", "O", "O", "B-political party", "I-political party", "I-political party", "O"]}, "label_list": ["location", "election", "politician", "political party", "country", "event", "organization", "person"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 4356, 6, 24694, 6, 1827, 1088, 6, 684, 6, 605, 6, 1470, 6, 568, 11, 411, 5, 4892, 17, 1433, 10, 611, 3, 6, 28, 8, 3, 26558, 13, 8, 31520, 7, 3, 6, 126, 2251, 13999, 24, 3958, 15, 26, 12, 8, 1088, 3, 31, 7, 380, 1247, 3, 6, 379, 8, 2730, 10021, 11, 16117, 3450, 41, 9579, 6892, 3, 61, 3, 6, 8, 11529, 3450, 13, 5961, 5316, 11, 8, 10021, 3545, 343, 3450, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.446605, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "However(O),(O) with(O) the(O) onset(O) of(O) the(O) Troubles(B-event),(O) new(O) parties(O) emerged(O) that(O) appealed(O) to(O) the(O) party's(O) support(O) base(O),(O) including(O) the(O) Social(B-political party) Democratic(I-political party) and(I-political party) Labour(I-political party) Party(I-political party) ((O) SDLP(B-political party) )(O),(O) the(O) Alliance(B-political party) Party(I-political party) of(I-political party) Northern(I-political party) Ireland(I-political party) and(O) the(O) Democratic(B-political party) Unionist(I-political party) Party(I-political party).(O)"}
{"id": "113", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "113", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, political party, event, country, person, organization, election, politician and O.\nSentence: During this period , despite no longer being in charge of external affairs , Ismail expressed strong support for an Association of Southeast Asia , telling the media that We look forward to a regional association embracing Thailand , Burma , Indonesia , Singapore , Malaysia , Philippines , Cambodia , Laos and Vietnam .", "prompt_labels": "During(O) this(O) period(O) ,(O) despite(O) no(O) longer(O) being(O) in(O) charge(O) of(O) external(O) affairs(O) ,(O) Ismail(B-person) expressed(O) strong(O) support(O) for(O) an(O) Association(B-organization) of(I-organization) Southeast(I-organization) Asia(I-organization) ,(O) telling(O) the(O) media(O) that(O) We(O) look(O) forward(O) to(O) a(O) regional(O) association(O) embracing(O) Thailand(B-country) ,(O) Burma(B-country) ,(O) Indonesia(B-country) ,(O) Singapore(B-country) ,(O) Malaysia(B-country) ,(O) Philippines(B-country) ,(O) Cambodia(B-country) ,(O) Laos(B-country) and(O) Vietnam(B-country) .(O)", "words": ["During", "this", "period", ",", "despite", "no", "longer", "being", "in", "charge", "of", "external", "affairs", ",", "Ismail", "expressed", "strong", "support", "for", "an", "Association", "of", "Southeast", "Asia", ",", "telling", "the", "media", "that", "We", "look", "forward", "to", "a", "regional", "association", "embracing", "Thailand", ",", "Burma", ",", "Indonesia", ",", "Singapore", ",", "Malaysia", ",", "Philippines", ",", "Cambodia", ",", "Laos", "and", "Vietnam", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-person", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O", "B-country", "O"]}, "label_list": ["location", "political party", "event", "country", "person", "organization", "election", "politician"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 1827, 1088, 6, 605, 6, 684, 6, 568, 6, 1470, 6, 4356, 6, 24694, 11, 411, 5, 4892, 17, 1433, 10, 3, 2092, 48, 1059, 3, 6, 3, 3565, 150, 1200, 271, 16, 1567, 13, 3866, 12748, 3, 6, 27, 7, 1963, 7103, 1101, 380, 21, 46, 2125, 13, 18862, 3826, 3, 6, 5188, 8, 783, 24, 101, 320, 1039, 12, 3, 9, 3518, 6028, 3, 24209, 10508, 3, 6, 4152, 51, 9, 3, 6, 9995, 3, 6, 6243, 3, 6, 10155, 3, 6, 12729, 3, 6, 25585, 3, 6, 325, 32, 7, 11, 8940, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.447323, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "During(O) this(O) period(O),(O) despite(O) no(O) longer(O) being(O) in(O) charge(O) of(O) external(O) affairs(O),(O) Ismail(O) expressed(O) strong(O) support(O) for(O) an(O) Association(B-organization) of(I-organization) Southeast(I-organization) Asia(I-organization),(O) telling(O) the(O) media(O) that(O) We(O) look(O) forward(O) to(O) a(O) regional(O) association(O) embracing(O) Thailand(B-country),(O) Burma(B-country),(O) Indonesia(B-country),(O) Singapore(B-country),(O) Malaysia(B-country),(O) Philippines(B-country),(O) Cambodia(B-country),(O) Laos(B-country) and(O) Vietnam(B-country).(O)"}
{"id": "239", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "239", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: event, location, country, organization, election, political party, person, politician and O.\nSentence: Wolman campaigned for the Legislative Assembly of Ontario in 1981 Ontario general election and 1985 Ontario general election as a Progressive Conservative Party of Ontario candidate , but lost both times to New Democratic Party incumbent Tony Grande .", "prompt_labels": "Wolman(B-politician) campaigned(O) for(O) the(O) Legislative(B-organization) Assembly(I-organization) of(I-organization) Ontario(I-organization) in(O) 1981(B-election) Ontario(I-election) general(I-election) election(I-election) and(O) 1985(B-election) Ontario(I-election) general(I-election) election(I-election) as(O) a(O) Progressive(B-political party) Conservative(I-political party) Party(I-political party) of(I-political party) Ontario(I-political party) candidate(O) ,(O) but(O) lost(O) both(O) times(O) to(O) New(B-political party) Democratic(I-political party) Party(I-political party) incumbent(O) Tony(B-politician) Grande(I-politician) .(O)", "words": ["Wolman", "campaigned", "for", "the", "Legislative", "Assembly", "of", "Ontario", "in", "1981", "Ontario", "general", "election", "and", "1985", "Ontario", "general", "election", "as", "a", "Progressive", "Conservative", "Party", "of", "Ontario", "candidate", ",", "but", "lost", "both", "times", "to", "New", "Democratic", "Party", "incumbent", "Tony", "Grande", "."], "labels": ["B-politician", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "B-election", "I-election", "I-election", "I-election", "O", "B-election", "I-election", "I-election", "I-election", "O", "O", "B-political party", "I-political party", "I-political party", "I-political party", "I-political party", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "I-political party", "O", "B-politician", "I-politician", "O"]}, "label_list": ["event", "location", "country", "organization", "election", "political party", "person", "politician"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 605, 6, 1128, 6, 684, 6, 1470, 6, 4356, 6, 1827, 1088, 6, 568, 6, 24694, 11, 411, 5, 4892, 17, 1433, 10, 3488, 40, 348, 2066, 15, 26, 21, 8, 17357, 7, 40, 1528, 11993, 13, 9163, 16, 15465, 9163, 879, 4356, 11, 13200, 9163, 879, 4356, 38, 3, 9, 27113, 23053, 3450, 13, 9163, 4775, 3, 6, 68, 1513, 321, 648, 12, 368, 10021, 3450, 28406, 9137, 15940, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.447928, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Wolman(O) campaigned(O) for(O) the(O) Legislative(B-organization) Assembly(I-organization) of(I-organization) Ontario(I-organization) in(O) 1981(B-event) Ontario(I-event) general(I-event) election(I-event) and(O) 1985(B-event) Ontario(I-event) general(I-event) election(I-event) as(O) a(O) Progressive(B-political party) Conservative(I-political party) Party(I-political party) of(I-political party) Ontario(I-political party) candidate(O),(O) but(O) lost(O) both(O) times(O) to(O) New(B-political party) Democratic(I-political party) Party(I-political party) incumbent(O) Tony(B-person) Grande(I-person).(O)"}
{"id": "320", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "320", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: organization, event, country, politician, political party, election, person, location and O.\nSentence: After the electoral defeat of Auzolan , EMK began a joint campaign with the trotskyist formation LKI , adopting a pro- abertzale speech and asking several times to vote for Herri Batasuna , which has led some historians to believe that the party became a satellite of Herri Batasuna .", "prompt_labels": "After(O) the(O) electoral(O) defeat(O) of(O) Auzolan(B-political party) ,(O) EMK(B-political party) began(O) a(O) joint(O) campaign(O) with(O) the(O) trotskyist(O) formation(O) LKI(B-political party) ,(O) adopting(O) a(O) pro-(O) abertzale(O) speech(O) and(O) asking(O) several(O) times(O) to(O) vote(O) for(O) Herri(B-political party) Batasuna(I-political party) ,(O) which(O) has(O) led(O) some(O) historians(O) to(O) believe(O) that(O) the(O) party(O) became(O) a(O) satellite(O) of(O) Herri(B-political party) Batasuna(I-political party) .(O)", "words": ["After", "the", "electoral", "defeat", "of", "Auzolan", ",", "EMK", "began", "a", "joint", "campaign", "with", "the", "trotskyist", "formation", "LKI", ",", "adopting", "a", "pro-", "abertzale", "speech", "and", "asking", "several", "times", "to", "vote", "for", "Herri", "Batasuna", ",", "which", "has", "led", "some", "historians", "to", "believe", "that", "the", "party", "became", "a", "satellite", "of", "Herri", "Batasuna", "."], "labels": ["O", "O", "O", "O", "O", "B-political party", "O", "B-political party", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-political party", "I-political party", "O"]}, "label_list": ["organization", "event", "country", "politician", "political party", "election", "person", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1470, 6, 605, 6, 684, 6, 24694, 6, 1827, 1088, 6, 4356, 6, 568, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 621, 8, 16289, 9589, 13, 1957, 12423, 152, 3, 6, 3, 6037, 439, 1553, 3, 9, 4494, 2066, 28, 8, 10968, 17, 5352, 343, 3239, 301, 14108, 3, 6, 4693, 53, 3, 9, 813, 18, 862, 17, 1629, 109, 5023, 11, 3558, 633, 648, 12, 2902, 21, 8816, 23, 8897, 9, 7, 202, 9, 3, 6, 84, 65, 2237, 128, 18637, 7, 12, 857, 24, 8, 1088, 1632, 3, 9, 7605, 13, 8816, 23, 8897, 9, 7, 202, 9, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.44359, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "After(O) the(O) electoral(O) defeat(O) of(O) Auzolan(B-person),(O) EMK(B-political party) began(O) a(O) joint(O) campaign(O) with(O) the(O) trotskyist(O) formation(O) LKI(B-political party),(O) adopting(O) a(O) pro-(O) abertzale(O) speech(O) and(O) asking(O) several(O) times(O) to(O) vote(O) for(O) Herri(B-person) Batasuna(I-person),(O) which(O) has(O) led(O) some(O) historians(O) to(O) believe(O) that(O) the(O) party(O) became(O) a(O) satellite(O) of(O) Herri(B-person) Batasuna(I-person).(O)"}
{"id": "425", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "425", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: political party, person, country, election, organization, event, politician, location and O.\nSentence: Members of the 3 Percenters , American Guard , Oath Keepers , and Proud Boys were present , as were Antifa and Black Lives Matter activists .", "prompt_labels": "Members(O) of(O) the(O) 3(B-organization) Percenters(I-organization) ,(O) American(B-organization) Guard(I-organization) ,(O) Oath(B-organization) Keepers(I-organization) ,(O) and(O) Proud(B-organization) Boys(I-organization) were(O) present(O) ,(O) as(O) were(O) Antifa(B-organization) and(O) Black(B-organization) Lives(I-organization) Matter(I-organization) activists(O) .(O)", "words": ["Members", "of", "the", "3", "Percenters", ",", "American", "Guard", ",", "Oath", "Keepers", ",", "and", "Proud", "Boys", "were", "present", ",", "as", "were", "Antifa", "and", "Black", "Lives", "Matter", "activists", "."], "labels": ["O", "O", "O", "B-organization", "I-organization", "O", "B-organization", "I-organization", "O", "B-organization", "I-organization", "O", "O", "B-organization", "I-organization", "O", "O", "O", "O", "O", "B-organization", "O", "B-organization", "I-organization", "I-organization", "O", "O"]}, "label_list": ["political party", "person", "country", "election", "organization", "event", "politician", "location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1827, 1088, 6, 568, 6, 684, 6, 4356, 6, 1470, 6, 605, 6, 24694, 6, 1128, 11, 411, 5, 4892, 17, 1433, 10, 9537, 13, 8, 220, 1915, 13866, 7, 3, 6, 797, 12899, 3, 6, 411, 9, 189, 3521, 277, 3, 6, 11, 749, 76, 26, 16575, 130, 915, 3, 6, 38, 130, 4066, 89, 9, 11, 1589, 3306, 7, 19888, 19053, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.445184, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Members(O) of(O) the(O) 3(B-organization) Percenters(I-organization),(O) American(B-organization) Guard(I-organization),(O) Oath(B-organization) Keepers(I-organization),(O) and(O) Proud(B-organization) Boys(I-organization) were(O) present(O),(O) as(O) were(O) Antifa(B-organization) and(O) Black(B-organization) Lives(I-organization) Matter(I-organization) activists(O).(O)"}
{"id": "486", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "486", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: person, politician, election, organization, location, political party, event, country and O.\nSentence: The national unity government ( War cabinet ) was the second of four war cabinets of the Dutch government-in-exile in London during World War II .", "prompt_labels": "The(O) national(B-organization) unity(I-organization) government(I-organization) ((O) War(B-organization) cabinet(I-organization) )(O) was(O) the(O) second(O) of(O) four(O) war(O) cabinets(O) of(O) the(O) Dutch(B-organization) government-in-exile(I-organization) in(O) London(B-location) during(O) World(B-event) War(I-event) II(I-event) .(O)", "words": ["The", "national", "unity", "government", "(", "War", "cabinet", ")", "was", "the", "second", "of", "four", "war", "cabinets", "of", "the", "Dutch", "government-in-exile", "in", "London", "during", "World", "War", "II", "."], "labels": ["O", "B-organization", "I-organization", "I-organization", "O", "B-organization", "I-organization", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "O", "B-location", "O", "B-event", "I-event", "I-event", "O"]}, "label_list": ["person", "politician", "election", "organization", "location", "political party", "event", "country"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 568, 6, 24694, 6, 4356, 6, 1470, 6, 1128, 6, 1827, 1088, 6, 605, 6, 684, 11, 411, 5, 4892, 17, 1433, 10, 37, 1157, 19952, 789, 41, 1602, 4566, 3, 61, 47, 8, 511, 13, 662, 615, 8684, 13, 8, 10098, 789, 18, 77, 18, 994, 699, 16, 1524, 383, 1150, 1602, 2466, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.445822, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) national(B-organization) unity(I-organization) government(I-organization) ((O) War(B-organization) cabinet(I-organization) )(O) was(O) the(O) second(O) of(O) four(O) war(O) cabinets(O) of(O) the(O) Dutch(B-country) government-in-exile(O) in(O) London(B-location) during(O) World(B-event) War(I-event) II(I-event).(O)"}
{"id": "501", "dataset": "crossner_politics", "split": "dev", "instance": {"id": "501", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: location, election, political party, organization, country, person, politician, event and O.\nSentence: The Persian Campaign or Invasion of Iran ( ) was a series of engagements in Iranian Azerbaijan region involving the forces of the Ottoman Empire against those of the British Empire and Russian Empire , and also involving local Persian population elements , beginning in December 1914 and ending with the Armistice of Mudros on October 30 , 1918 , as part of Middle Eastern theatre of World War I .", "prompt_labels": "The(O) Persian(B-event) Campaign(I-event) or(O) Invasion(B-event) of(I-event) Iran(I-event) ((O) )(O) was(O) a(O) series(O) of(O) engagements(O) in(O) Iranian(B-location) Azerbaijan(I-location) region(O) involving(O) the(O) forces(O) of(O) the(O) Ottoman(B-country) Empire(I-country) against(O) those(O) of(O) the(O) British(B-country) Empire(I-country) and(O) Russian(B-country) Empire(I-country) ,(O) and(O) also(O) involving(O) local(O) Persian(O) population(O) elements(O) ,(O) beginning(O) in(O) December(O) 1914(O) and(O) ending(O) with(O) the(O) Armistice(B-event) of(I-event) Mudros(I-event) on(O) October(O) 30(O) ,(O) 1918(O) ,(O) as(O) part(O) of(O) Middle(B-event) Eastern(I-event) theatre(I-event) of(I-event) World(I-event) War(I-event) I(I-event) .(O)", "words": ["The", "Persian", "Campaign", "or", "Invasion", "of", "Iran", "(", ")", "was", "a", "series", "of", "engagements", "in", "Iranian", "Azerbaijan", "region", "involving", "the", "forces", "of", "the", "Ottoman", "Empire", "against", "those", "of", "the", "British", "Empire", "and", "Russian", "Empire", ",", "and", "also", "involving", "local", "Persian", "population", "elements", ",", "beginning", "in", "December", "1914", "and", "ending", "with", "the", "Armistice", "of", "Mudros", "on", "October", "30", ",", "1918", ",", "as", "part", "of", "Middle", "Eastern", "theatre", "of", "World", "War", "I", "."], "labels": ["O", "B-event", "I-event", "O", "B-event", "I-event", "I-event", "O", "O", "O", "O", "O", "O", "O", "O", "B-location", "I-location", "O", "O", "O", "O", "O", "O", "B-country", "I-country", "O", "O", "O", "O", "B-country", "I-country", "O", "B-country", "I-country", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-event", "I-event", "I-event", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-event", "I-event", "I-event", "I-event", "I-event", "I-event", "I-event", "O"]}, "label_list": ["location", "election", "political party", "organization", "country", "person", "politician", "event"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1128, 6, 4356, 6, 1827, 1088, 6, 1470, 6, 684, 6, 568, 6, 24694, 6, 605, 11, 411, 5, 4892, 17, 1433, 10, 37, 25518, 18409, 42, 86, 900, 1938, 13, 7449, 41, 3, 61, 47, 3, 9, 939, 13, 3813, 7, 16, 19143, 71, 2558, 9441, 7066, 1719, 3, 6475, 8, 3859, 13, 8, 12881, 32, 348, 12187, 581, 273, 13, 8, 2390, 12187, 11, 4263, 12187, 3, 6, 11, 92, 3, 6475, 415, 25518, 2074, 2479, 3, 6, 1849, 16, 1882, 24725, 11, 7784, 28, 8, 5412, 3040, 15, 13, 4159, 26, 1859, 30, 1797, 604, 3, 6, 21402, 3, 6, 38, 294, 13, 4551, 7345, 8516, 13, 1150, 1602, 27, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.446724, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) Persian(B-event) Campaign(I-event) or(O) Invasion(B-event) of(I-event) Iran(B-country) ((O) )(O) was(O) a(O) series(O) of(O) engagements(O) in(O) Iranian(B-location) Azerbaijan(I-location) region(O) involving(O) the(O) forces(O) of(O) the(O) Ottoman(B-organization) Empire(I-organization) against(O) those(O) of(O) the(O) British(B-organization) Empire(I-organization) and(O) Russian(B-organization) Empire(I-organization),(O) and(O) also(O) involving(O) local(O) Persian(O) population(O) elements(O),(O) beginning(O) in(O) December(O) 1914(O) and(O) ending(O) with(O) the(O) Armistice(B-event) of(I-event) Mudros(I-event) on(O) October(O) 30(O),(O) 1918(O),(O) as(O) part(O) of(O) Middle(B-location) Eastern(I-location) theatre(O) of(O) World(B-event) War(I-event) I(I-event).(O)"}
{"id": "43", "dataset": "crossner_science", "split": "dev", "instance": {"id": "43", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: astronomical object, theory, discipline, academic journal, university, country, award, location, chemical element, protein, person, scientist, enzyme, event, organization, chemical compound and O.\nSentence: Heartstone has also been a part of a number of esport demonstration event s at international competitions , such as the 2017 Asian Indoor and Martial Arts Games and 2018 Asian Games .", "prompt_labels": "Heartstone(B-event) has(O) also(O) been(O) a(O) part(O) of(O) a(O) number(O) of(O) esport(O) demonstration(O) event(O) s(O) at(O) international(O) competitions(O) ,(O) such(O) as(O) the(O) 2017(B-event) Asian(I-event) Indoor(I-event) and(I-event) Martial(I-event) Arts(I-event) Games(I-event) and(O) 2018(B-event) Asian(I-event) Games(I-event) .(O)", "words": ["Heartstone", "has", "also", "been", "a", "part", "of", "a", "number", "of", "esport", "demonstration", "event", "s", "at", "international", "competitions", ",", "such", "as", "the", "2017", "Asian", "Indoor", "and", "Martial", "Arts", "Games", "and", "2018", "Asian", "Games", "."], "labels": ["B-event", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-event", "I-event", "I-event", "I-event", "I-event", "I-event", "I-event", "O", "B-event", "I-event", "I-event", "O"]}, "label_list": ["astronomical object", "theory", "discipline", "academic journal", "university", "country", "award", "location", "chemical element", "protein", "person", "scientist", "enzyme", "event", "organization", "chemical compound"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 3, 12466, 1950, 3735, 6, 4516, 6, 7998, 6, 2705, 6378, 6, 3819, 6, 684, 6, 2760, 6, 1128, 6, 5368, 3282, 6, 3619, 6, 568, 6, 17901, 6, 15735, 6, 605, 6, 1470, 6, 5368, 12771, 11, 411, 5, 4892, 17, 1433, 10, 6219, 3009, 65, 92, 118, 3, 9, 294, 13, 3, 9, 381, 13, 3, 15, 6661, 10686, 605, 3, 7, 44, 1038, 2259, 7, 3, 6, 224, 38, 8, 1233, 6578, 25483, 11, 1571, 10646, 4218, 5880, 11, 846, 6578, 5880, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.447469, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Heartstone(B-organization) has(O) also(O) been(O) a(O) part(O) of(O) a(O) number(O) of(O) esport(B-event) demonstration(I-event) event(I-event) s(O) at(O) international(B-event) competitions(I-event),(O) such(O) as(O) the(O) 2017(B-event) Asian(I-event) Indoor(I-event) and(I-event) Martial(I-event) Arts(I-event) Games(I-event) and(O) 2018(B-event) Asian(I-event) Games(I-event).(O)"}
{"id": "82", "dataset": "crossner_science", "split": "dev", "instance": {"id": "82", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: astronomical object, academic journal, organization, university, event, theory, discipline, enzyme, country, person, protein, chemical element, chemical compound, location, scientist, award and O.\nSentence: They are made up of monomers called nucleotide s which consist of an organic base : Adenine , Guanine , Cytosine and Tyrosine or Uracil , a pentose sugar , and a Phosphate .", "prompt_labels": "They(O) are(O) made(O) up(O) of(O) monomers(O) called(O) nucleotide(B-chemical compound) s(O) which(O) consist(O) of(O) an(O) organic(O) base(O) :(O) Adenine(B-chemical compound) ,(O) Guanine(B-chemical compound) ,(O) Cytosine(B-chemical compound) and(O) Tyrosine(B-chemical compound) or(O) Uracil(B-chemical compound) ,(O) a(O) pentose(B-chemical compound) sugar(I-chemical compound) ,(O) and(O) a(O) Phosphate(O) .(O)", "words": ["They", "are", "made", "up", "of", "monomers", "called", "nucleotide", "s", "which", "consist", "of", "an", "organic", "base", ":", "Adenine", ",", "Guanine", ",", "Cytosine", "and", "Tyrosine", "or", "Uracil", ",", "a", "pentose", "sugar", ",", "and", "a", "Phosphate", "."], "labels": ["O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "B-chemical compound", "O", "B-chemical compound", "O", "B-chemical compound", "O", "B-chemical compound", "O", "O", "B-chemical compound", "I-chemical compound", "O", "O", "O", "O", "O"]}, "label_list": ["astronomical object", "academic journal", "organization", "university", "event", "theory", "discipline", "enzyme", "country", "person", "protein", "chemical element", "chemical compound", "location", "scientist", "award"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 3, 12466, 1950, 3735, 6, 2705, 6378, 6, 1470, 6, 3819, 6, 605, 6, 4516, 6, 7998, 6, 15735, 6, 684, 6, 568, 6, 3619, 6, 5368, 3282, 6, 5368, 12771, 6, 1128, 6, 17901, 6, 2760, 11, 411, 5, 4892, 17, 1433, 10, 328, 33, 263, 95, 13, 7414, 5567, 718, 206, 2482, 32, 17, 1599, 3, 7, 84, 5608, 13, 46, 3648, 1247, 3, 10, 71, 537, 630, 3, 6, 2846, 152, 630, 3, 6, 6400, 235, 7, 630, 11, 10352, 1859, 630, 42, 412, 3738, 173, 3, 6, 3, 9, 4550, 235, 7, 15, 2656, 3, 6, 11, 3, 9, 276, 11982, 102, 547, 15, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.448118, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "They(O) are(O) made(O) up(O) of(O) monomers(B-chemical compound) called(O) nucleotide(B-chemical compound) s(I-chemical compound) which(O) consist(O) of(O) an(O) organic(B-chemical compound) base(I-chemical compound) :(O) Adenine(B-chemical element),(O) Guanine(B-chemical element),(O) Cytosine(B-chemical element) and(O) Tyrosine(B-chemical element) or(O) Uracil(B-chemical element),(O) a(O) pentose(B-chemical compound) sugar(I-chemical compound),(O) and(O) a(O) Phosphate(B-chemical compound).(O)"}
{"id": "231", "dataset": "crossner_science", "split": "dev", "instance": {"id": "231", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: scientist, location, university, theory, person, academic journal, discipline, organization, chemical compound, enzyme, astronomical object, award, chemical element, protein, country, event and O.\nSentence: Schweickart is a Fellow of the American Astronautical Society , the International Academy of Astronautics and the California Academy of Sciences , as well as an Associate Fellow of the American Institute of Aeronautics and Astronautics .", "prompt_labels": "Schweickart(B-scientist) is(O) a(O) Fellow(B-award) of(I-award) the(I-award) American(I-award) Astronautical(I-award) Society(I-award) ,(O) the(O) International(B-organization) Academy(I-organization) of(I-organization) Astronautics(I-organization) and(O) the(O) California(B-organization) Academy(I-organization) of(I-organization) Sciences(I-organization) ,(O) as(O) well(O) as(O) an(O) Associate(O) Fellow(O) of(O) the(O) American(B-organization) Institute(I-organization) of(I-organization) Aeronautics(I-organization) and(I-organization) Astronautics(I-organization) .(O)", "words": ["Schweickart", "is", "a", "Fellow", "of", "the", "American", "Astronautical", "Society", ",", "the", "International", "Academy", "of", "Astronautics", "and", "the", "California", "Academy", "of", "Sciences", ",", "as", "well", "as", "an", "Associate", "Fellow", "of", "the", "American", "Institute", "of", "Aeronautics", "and", "Astronautics", "."], "labels": ["B-scientist", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "I-award", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O"]}, "label_list": ["scientist", "location", "university", "theory", "person", "academic journal", "discipline", "organization", "chemical compound", "enzyme", "astronomical object", "award", "chemical element", "protein", "country", "event"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 17901, 6, 1128, 6, 3819, 6, 4516, 6, 568, 6, 2705, 6378, 6, 7998, 6, 1470, 6, 5368, 12771, 6, 15735, 6, 3, 12466, 1950, 3735, 6, 2760, 6, 5368, 3282, 6, 3619, 6, 684, 6, 605, 11, 411, 5, 4892, 17, 1433, 10, 9430, 3142, 1408, 19, 3, 9, 16344, 13, 8, 797, 15001, 15785, 1950, 3467, 3, 6, 8, 1331, 4702, 13, 15001, 15785, 447, 7, 11, 8, 1826, 4702, 13, 9226, 3, 6, 38, 168, 38, 46, 13860, 16344, 13, 8, 797, 2548, 13, 12727, 15785, 447, 7, 11, 15001, 15785, 447, 7, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.44881, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Schweickart(O) is(O) a(O) Fellow(B-award) of(O) the(O) American(B-organization) Astronautical(I-organization) Society(I-organization),(O) the(O) International(B-organization) Academy(I-organization) of(I-organization) Astronautics(I-organization) and(O) the(O) California(B-organization) Academy(I-organization) of(I-organization) Sciences(I-organization),(O) as(O) well(O) as(O) an(O) Associate(B-award) Fellow(I-award) of(O) the(O) American(B-organization) Institute(I-organization) of(I-organization) Aeronautics(I-organization) and(I-organization) Astronautics(I-organization).(O)"}
{"id": "306", "dataset": "crossner_science", "split": "dev", "instance": {"id": "306", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: enzyme, location, award, person, university, organization, discipline, event, astronomical object, theory, protein, chemical element, country, scientist, academic journal, chemical compound and O.\nSentence: The hydroxyl radical can damage virtually all types of macromolecules : carbohydrates , nucleic acids ( mutation s ) , lipids ( lipid peroxidation ) , and amino acids ( e.g. conversion of Phenylalanine to m - Tyrosine and o - Tyrosine ) .", "prompt_labels": "The(O) hydroxyl(B-chemical compound) radical(I-chemical compound) can(O) damage(O) virtually(O) all(O) types(O) of(O) macromolecules(O) :(O) carbohydrates(B-chemical compound) ,(O) nucleic(B-chemical compound) acids(I-chemical compound) ((O) mutation(O) s(O) )(O) ,(O) lipids(B-chemical compound) ((O) lipid(B-chemical compound) peroxidation(O) )(O) ,(O) and(O) amino(O) acids(O) ((O) e.g.(O) conversion(O) of(O) Phenylalanine(B-chemical compound) to(O) m(B-chemical compound) -(I-chemical compound) Tyrosine(B-chemical compound) and(O) o(B-chemical compound) -(I-chemical compound) Tyrosine(I-chemical compound) )(O) .(O)", "words": ["The", "hydroxyl", "radical", "can", "damage", "virtually", "all", "types", "of", "macromolecules", ":", "carbohydrates", ",", "nucleic", "acids", "(", "mutation", "s", ")", ",", "lipids", "(", "lipid", "peroxidation", ")", ",", "and", "amino", "acids", "(", "e.g.", "conversion", "of", "Phenylalanine", "to", "m", "-", "Tyrosine", "and", "o", "-", "Tyrosine", ")", "."], "labels": ["O", "B-chemical compound", "I-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "B-chemical compound", "I-chemical compound", "O", "O", "O", "O", "O", "B-chemical compound", "O", "B-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "B-chemical compound", "I-chemical compound", "B-chemical compound", "O", "B-chemical compound", "I-chemical compound", "I-chemical compound", "O", "O"]}, "label_list": ["enzyme", "location", "award", "person", "university", "organization", "discipline", "event", "astronomical object", "theory", "protein", "chemical element", "country", "scientist", "academic journal", "chemical compound"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 15735, 6, 1128, 6, 2760, 6, 568, 6, 3819, 6, 1470, 6, 7998, 6, 605, 6, 3, 12466, 1950, 3735, 6, 4516, 6, 3619, 6, 5368, 3282, 6, 684, 6, 17901, 6, 2705, 6378, 6, 5368, 12771, 11, 411, 5, 4892, 17, 1433, 10, 37, 3, 30966, 40, 8819, 54, 1783, 9114, 66, 1308, 13, 11663, 23098, 7, 3, 10, 26883, 3, 6, 206, 2482, 447, 15215, 41, 17324, 3, 7, 3, 61, 3, 6, 3, 19437, 7, 41, 3, 19437, 399, 6778, 257, 3, 61, 3, 6, 11, 17925, 15215, 41, 3, 15, 5, 122, 5, 6113, 13, 3657, 35, 63, 521, 1618, 630, 12, 3, 51, 3, 18, 10352, 1859, 630, 11, 3, 32, 3, 18, 10352, 1859, 630, 3, 61, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.449527, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) hydroxyl(B-chemical compound) radical(I-chemical compound) can(O) damage(O) virtually(O) all(O) types(O) of(O) macromolecules(B-chemical compound) :(O) carbohydrates(B-chemical compound),(O) nucleic(B-chemical compound) acids(I-chemical compound) ((O) mutation(B-chemical compound) s(I-chemical compound) )(O),(O) lipids(B-chemical compound) ((O) lipid(B-chemical compound) peroxidation(I-chemical compound) )(O),(O) and(O) amino(B-chemical compound) acids(I-chemical compound) ((O) e.g.(O) conversion(O) of(O) Phenylalanine(B-chemical compound) to(O) m(B-chemical compound) -(I-chemical compound) Tyrosine(I-chemical compound) and(O) o(B-chemical compound) -(I-chemical compound) Tyrosine(I-chemical compound) )(O).(O)"}
{"id": "329", "dataset": "crossner_science", "split": "dev", "instance": {"id": "329", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: theory, university, discipline, event, astronomical object, protein, country, location, chemical compound, chemical element, organization, person, academic journal, award, enzyme, scientist and O.\nSentence: In 2015 , Hill was a Professor at the Ontario Cancer Institute and a Senior Scientist at the Princess Margaret Cancer Centre within the University Health Network , which is affiliated with the University of Toronto Faculty of Medicine .", "prompt_labels": "In(O) 2015(O) ,(O) Hill(B-scientist) was(O) a(O) Professor(O) at(O) the(O) Ontario(B-organization) Cancer(I-organization) Institute(I-organization) and(O) a(O) Senior(O) Scientist(O) at(O) the(O) Princess(B-organization) Margaret(I-organization) Cancer(I-organization) Centre(I-organization) within(O) the(O) University(B-university) Health(I-university) Network(I-university) ,(O) which(O) is(O) affiliated(O) with(O) the(O) University(B-organization) of(I-organization) Toronto(I-organization) Faculty(I-organization) of(I-organization) Medicine(I-organization) .(O)", "words": ["In", "2015", ",", "Hill", "was", "a", "Professor", "at", "the", "Ontario", "Cancer", "Institute", "and", "a", "Senior", "Scientist", "at", "the", "Princess", "Margaret", "Cancer", "Centre", "within", "the", "University", "Health", "Network", ",", "which", "is", "affiliated", "with", "the", "University", "of", "Toronto", "Faculty", "of", "Medicine", "."], "labels": ["O", "O", "O", "B-scientist", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "O", "O", "B-university", "I-university", "I-university", "O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O"]}, "label_list": ["theory", "university", "discipline", "event", "astronomical object", "protein", "country", "location", "chemical compound", "chemical element", "organization", "person", "academic journal", "award", "enzyme", "scientist"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 4516, 6, 3819, 6, 7998, 6, 605, 6, 3, 12466, 1950, 3735, 6, 3619, 6, 684, 6, 1128, 6, 5368, 12771, 6, 5368, 3282, 6, 1470, 6, 568, 6, 2705, 6378, 6, 2760, 6, 15735, 6, 17901, 11, 411, 5, 4892, 17, 1433, 10, 86, 1230, 3, 6, 3588, 47, 3, 9, 5589, 44, 8, 9163, 9520, 2548, 11, 3, 9, 5523, 21166, 44, 8, 15615, 16689, 9520, 2969, 441, 8, 636, 1685, 3426, 3, 6, 84, 19, 18273, 28, 8, 636, 13, 7030, 16896, 13, 6852, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.450226, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 2015(O),(O) Hill(O) was(O) a(O) Professor(O) at(O) the(O) Ontario(B-university) Cancer(I-university) Institute(I-university) and(O) a(O) Senior(O) Scientist(O) at(O) the(O) Princess(B-organization) Margaret(I-organization) Cancer(I-organization) Centre(I-organization) within(O) the(O) University(B-organization) Health(I-organization) Network(I-organization),(O) which(O) is(O) affiliated(O) with(O) the(O) University(B-university) of(I-university) Toronto(I-university) Faculty(I-university) of(I-university) Medicine(I-university).(O)"}
{"id": "343", "dataset": "crossner_science", "split": "dev", "instance": {"id": "343", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: theory, event, country, university, chemical element, protein, enzyme, discipline, academic journal, scientist, person, organization, astronomical object, award, location, chemical compound and O.\nSentence: Ethylmercury is a breakdown product of the antibacteriological agent ethylmercurithiosalicylate , which has been used as a topical antiseptic and a vaccine preservative ( further discussed under Thiomersal below ) .", "prompt_labels": "Ethylmercury(B-chemical compound) is(O) a(O) breakdown(O) product(O) of(O) the(O) antibacteriological(O) agent(O) ethylmercurithiosalicylate(B-chemical compound) ,(O) which(O) has(O) been(O) used(O) as(O) a(O) topical(O) antiseptic(O) and(O) a(O) vaccine(O) preservative(O) ((O) further(O) discussed(O) under(O) Thiomersal(B-chemical compound) below(O) )(O) .(O)", "words": ["Ethylmercury", "is", "a", "breakdown", "product", "of", "the", "antibacteriological", "agent", "ethylmercurithiosalicylate", ",", "which", "has", "been", "used", "as", "a", "topical", "antiseptic", "and", "a", "vaccine", "preservative", "(", "further", "discussed", "under", "Thiomersal", "below", ")", "."], "labels": ["B-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-chemical compound", "O", "O", "O"]}, "label_list": ["theory", "event", "country", "university", "chemical element", "protein", "enzyme", "discipline", "academic journal", "scientist", "person", "organization", "astronomical object", "award", "location", "chemical compound"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 4516, 6, 605, 6, 684, 6, 3819, 6, 5368, 3282, 6, 3619, 6, 15735, 6, 7998, 6, 2705, 6378, 6, 17901, 6, 568, 6, 1470, 6, 3, 12466, 1950, 3735, 6, 2760, 6, 1128, 6, 5368, 12771, 11, 411, 5, 4892, 17, 1433, 10, 262, 189, 63, 40, 935, 3663, 63, 19, 3, 9, 15568, 556, 13, 8, 1181, 19628, 23, 4478, 3102, 3, 15, 189, 63, 40, 935, 9659, 7436, 32, 7, 138, 17686, 5867, 3, 6, 84, 65, 118, 261, 38, 3, 9, 2859, 138, 1181, 7, 14629, 11, 3, 9, 12956, 554, 3473, 1528, 41, 856, 5172, 365, 11988, 32, 5567, 138, 666, 3, 61, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.450878, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "Ethylmercury(B-chemical element) is(O) a(O) breakdown(O) product(O) of(O) the(O) antibacteriological(B-chemical compound) agent(I-chemical compound) ethylmercurithiosalicylate(I-chemical compound),(O) which(O) has(O) been(O) used(O) as(O) a(O) topical(B-chemical compound) antiseptic(I-chemical compound) and(O) a(O) vaccine(B-chemical compound) preservative(I-chemical compound) ((O) further(O) discussed(O) under(O) Thiomersal(B-academic journal) below(O) )(O).(O)"}
{"id": "371", "dataset": "crossner_science", "split": "dev", "instance": {"id": "371", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: chemical compound, award, university, person, location, protein, event, theory, chemical element, organization, scientist, discipline, enzyme, country, academic journal, astronomical object and O.\nSentence: In 1978 , scientists at BMI-TNO , the research unit of Netherlands Organisation for Applied Scientific Research at the University of Amsterdam , invented and patented a series of additional key elements that make the volume clamp work in clinical practice .", "prompt_labels": "In(O) 1978(O) ,(O) scientists(O) at(O) BMI-TNO(B-organization) ,(O) the(O) research(O) unit(O) of(O) Netherlands(B-organization) Organisation(I-organization) for(I-organization) Applied(I-organization) Scientific(I-organization) Research(I-organization) at(O) the(O) University(B-university) of(I-university) Amsterdam(I-university) ,(O) invented(O) and(O) patented(O) a(O) series(O) of(O) additional(O) key(O) elements(O) that(O) make(O) the(O) volume(O) clamp(O) work(O) in(O) clinical(O) practice(O) .(O)", "words": ["In", "1978", ",", "scientists", "at", "BMI-TNO", ",", "the", "research", "unit", "of", "Netherlands", "Organisation", "for", "Applied", "Scientific", "Research", "at", "the", "University", "of", "Amsterdam", ",", "invented", "and", "patented", "a", "series", "of", "additional", "key", "elements", "that", "make", "the", "volume", "clamp", "work", "in", "clinical", "practice", "."], "labels": ["O", "O", "O", "O", "O", "B-organization", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "O", "B-university", "I-university", "I-university", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"]}, "label_list": ["chemical compound", "award", "university", "person", "location", "protein", "event", "theory", "chemical element", "organization", "scientist", "discipline", "enzyme", "country", "academic journal", "astronomical object"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 5368, 12771, 6, 2760, 6, 3819, 6, 568, 6, 1128, 6, 3619, 6, 605, 6, 4516, 6, 5368, 3282, 6, 1470, 6, 17901, 6, 7998, 6, 15735, 6, 684, 6, 2705, 6378, 6, 3, 12466, 1950, 3735, 11, 411, 5, 4892, 17, 1433, 10, 86, 14834, 3, 6, 7004, 44, 272, 7075, 18, 382, 7400, 3, 6, 8, 585, 1745, 13, 12023, 11033, 21, 3, 20822, 19268, 2200, 44, 8, 636, 13, 14305, 3, 6, 20897, 11, 3, 22370, 3, 9, 939, 13, 1151, 843, 2479, 24, 143, 8, 2908, 20084, 161, 16, 3739, 1032, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.45161, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "In(O) 1978(O),(O) scientists(O) at(O) BMI-TNO(B-organization),(O) the(O) research(O) unit(O) of(O) Netherlands(B-organization) Organisation(I-organization) for(I-organization) Applied(I-organization) Scientific(I-organization) Research(I-organization) at(O) the(O) University(B-university) of(I-university) Amsterdam(I-university),(O) invented(O) and(O) patented(O) a(O) series(O) of(O) additional(O) key(O) elements(O) that(O) make(O) the(O) volume(O) clamp(O) work(O) in(O) clinical(B-discipline) practice(I-discipline).(O)"}
{"id": "416", "dataset": "crossner_science", "split": "dev", "instance": {"id": "416", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: chemical element, discipline, theory, organization, award, event, university, location, chemical compound, protein, person, scientist, country, astronomical object, academic journal, enzyme and O.\nSentence: H3K4me3 is an epigenetic modification to the DNA packaging protein Histone H3 .", "prompt_labels": "H3K4me3(B-chemical compound) is(O) an(O) epigenetic(O) modification(O) to(O) the(O) DNA(O) packaging(O) protein(O) Histone(B-protein) H3(I-protein) .(O)", "words": ["H3K4me3", "is", "an", "epigenetic", "modification", "to", "the", "DNA", "packaging", "protein", "Histone", "H3", "."], "labels": ["B-chemical compound", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-protein", "I-protein", "O"]}, "label_list": ["chemical element", "discipline", "theory", "organization", "award", "event", "university", "location", "chemical compound", "protein", "person", "scientist", "country", "astronomical object", "academic journal", "enzyme"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 5368, 3282, 6, 7998, 6, 4516, 6, 1470, 6, 2760, 6, 605, 6, 3819, 6, 1128, 6, 5368, 12771, 6, 3619, 6, 568, 6, 17901, 6, 684, 6, 3, 12466, 1950, 3735, 6, 2705, 6378, 6, 15735, 11, 411, 5, 4892, 17, 1433, 10, 454, 519, 439, 591, 526, 519, 19, 46, 9241, 729, 7578, 12767, 12, 8, 6642, 6745, 3619, 2018, 3009, 454, 519, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.452149, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "H3K4me3(B-enzyme) is(O) an(O) epigenetic(O) modification(O) to(O) the(O) DNA(B-protein) packaging(I-protein) protein(I-protein) Histone(I-protein) H3(I-protein).(O)"}
{"id": "436", "dataset": "crossner_science", "split": "dev", "instance": {"id": "436", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: university, theory, astronomical object, chemical element, discipline, event, enzyme, protein, country, academic journal, location, award, person, chemical compound, organization, scientist and O.\nSentence: The film was also nominated for Academy Award for Best Supporting Actor ( Sam Shepard ) , Academy Award for Best Production Design ( Art Direction : Geoffrey Kirkland , Richard Lawrence , W. Stewart Campbell and Peter R. Romero ; Set Decoration : George R. Nelson ) , Academy Award for Best Cinematography ( Caleb Deschanel ) and Academy Award for Best Picture .", "prompt_labels": "The(O) film(O) was(O) also(O) nominated(O) for(O) Academy(B-award) Award(I-award) for(I-award) Best(I-award) Supporting(I-award) Actor(I-award) ((O) Sam(B-person) Shepard(I-person) )(O) ,(O) Academy(B-award) Award(I-award) for(I-award) Best(I-award) Production(I-award) Design(I-award) ((O) Art(B-person) Direction(I-person) :(O) Geoffrey(B-person) Kirkland(I-person) ,(O) Richard(B-person) Lawrence(I-person) ,(O) W.(B-person) Stewart(I-person) Campbell(I-person) and(O) Peter(B-person) R.(I-person) Romero(I-person) ;(O) Set(B-person) Decoration(I-person) :(O) George(B-person) R.(I-person) Nelson(I-person) )(O) ,(O) Academy(B-award) Award(I-award) for(I-award) Best(I-award) Cinematography(I-award) ((O) Caleb(B-person) Deschanel(I-person) )(O) and(O) Academy(B-award) Award(I-award) for(I-award) Best(I-award) Picture(I-award) .(O)", "words": ["The", "film", "was", "also", "nominated", "for", "Academy", "Award", "for", "Best", "Supporting", "Actor", "(", "Sam", "Shepard", ")", ",", "Academy", "Award", "for", "Best", "Production", "Design", "(", "Art", "Direction", ":", "Geoffrey", "Kirkland", ",", "Richard", "Lawrence", ",", "W.", "Stewart", "Campbell", "and", "Peter", "R.", "Romero", ";", "Set", "Decoration", ":", "George", "R.", "Nelson", ")", ",", "Academy", "Award", "for", "Best", "Cinematography", "(", "Caleb", "Deschanel", ")", "and", "Academy", "Award", "for", "Best", "Picture", "."], "labels": ["O", "O", "O", "O", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "I-award", "O", "B-person", "I-person", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "I-award", "O", "B-person", "I-person", "O", "B-person", "I-person", "O", "B-person", "I-person", "O", "B-person", "I-person", "I-person", "O", "B-person", "I-person", "I-person", "O", "B-person", "I-person", "O", "B-person", "I-person", "I-person", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "O", "B-person", "I-person", "O", "O", "B-award", "I-award", "I-award", "I-award", "I-award", "O"]}, "label_list": ["university", "theory", "astronomical object", "chemical element", "discipline", "event", "enzyme", "protein", "country", "academic journal", "location", "award", "person", "chemical compound", "organization", "scientist"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 3819, 6, 4516, 6, 3, 12466, 1950, 3735, 6, 5368, 3282, 6, 7998, 6, 605, 6, 15735, 6, 3619, 6, 684, 6, 2705, 6378, 6, 1128, 6, 2760, 6, 568, 6, 5368, 12771, 6, 1470, 6, 17901, 11, 411, 5, 4892, 17, 1433, 10, 37, 814, 47, 92, 150, 1109, 920, 21, 4702, 3677, 21, 1648, 4224, 53, 1983, 127, 41, 3084, 451, 1893, 26, 3, 61, 3, 6, 4702, 3677, 21, 1648, 11114, 1642, 41, 1261, 19436, 3, 10, 961, 15007, 63, 17839, 40, 232, 3, 6, 4117, 16617, 3, 6, 549, 5, 16496, 17034, 11, 2737, 391, 5, 7332, 52, 32, 3, 117, 2821, 23367, 3, 10, 3080, 391, 5, 14448, 3, 61, 3, 6, 4702, 3677, 21, 1648, 17544, 17, 5984, 41, 3104, 15, 115, 2973, 8694, 15, 40, 3, 61, 11, 4702, 3677, 21, 1648, 15440, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.452971, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "The(O) film(O) was(O) also(O) nominated(O) for(O) Academy(B-award) Award(I-award) for(O) Best(O) Supporting(O) Actor(O) ((O) Sam(B-person) Shepard(I-person) )(O),(O) Academy(B-award) Award(I-award) for(O) Best(O) Production(O) Design(O) ((O) Art(O) Direction(O) :(O) Geoffrey(B-person) Kirkland(I-person),(O) Richard(B-person) Lawrence(I-person),(O) W.(B-person) Stewart(I-person) Campbell(I-person) and(O) Peter(B-person) R.(I-person) Romero(I-person) ;(O) Set(O) Decoration(O) :(O) George(B-person) R.(I-person) Nelson(I-person) )(O),(O) Academy(B-award) Award(I-award) for(O) Best(O) Cinematography(O) ((O) Caleb(B-person) Deschanel(I-person) )(O) and(O) Academy(B-award) Award(I-award) for(O) Best(O) Picture(O).(O)"}
{"id": "448", "dataset": "crossner_science", "split": "dev", "instance": {"id": "448", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: discipline, chemical compound, astronomical object, location, chemical element, event, university, organization, theory, protein, academic journal, award, person, scientist, country, enzyme and O.\nSentence: She is a member of the Australian Antarctic Research Advisory Committee and serves on the Editorial Boards of the international journals : Ecosystems , Global Change Biology , Oecologia , Plant , Cell ; Environment , and Tree Physiology .", "prompt_labels": "She(O) is(O) a(O) member(O) of(O) the(O) Australian(B-organization) Antarctic(I-organization) Research(I-organization) Advisory(I-organization) Committee(I-organization) and(O) serves(O) on(O) the(O) Editorial(O) Boards(O) of(O) the(O) international(O) journals(O) :(O) Ecosystems(B-academic journal) ,(O) Global(B-academic journal) Change(I-academic journal) Biology(I-academic journal) ,(O) Oecologia(B-academic journal) ,(O) Plant(B-academic journal) ,(O) Cell(B-academic journal) ;(O) Environment(B-academic journal) ,(O) and(O) Tree(B-academic journal) Physiology(I-academic journal) .(O)", "words": ["She", "is", "a", "member", "of", "the", "Australian", "Antarctic", "Research", "Advisory", "Committee", "and", "serves", "on", "the", "Editorial", "Boards", "of", "the", "international", "journals", ":", "Ecosystems", ",", "Global", "Change", "Biology", ",", "Oecologia", ",", "Plant", ",", "Cell", ";", "Environment", ",", "and", "Tree", "Physiology", "."], "labels": ["O", "O", "O", "O", "O", "O", "B-organization", "I-organization", "I-organization", "I-organization", "I-organization", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-academic journal", "O", "B-academic journal", "I-academic journal", "I-academic journal", "O", "B-academic journal", "O", "B-academic journal", "O", "B-academic journal", "O", "B-academic journal", "O", "O", "B-academic journal", "I-academic journal", "O"]}, "label_list": ["discipline", "chemical compound", "astronomical object", "location", "chemical element", "event", "university", "organization", "theory", "protein", "academic journal", "award", "person", "scientist", "country", "enzyme"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 7998, 6, 5368, 12771, 6, 3, 12466, 1950, 3735, 6, 1128, 6, 5368, 3282, 6, 605, 6, 3819, 6, 1470, 6, 4516, 6, 3619, 6, 2705, 6378, 6, 2760, 6, 568, 6, 17901, 6, 684, 6, 15735, 11, 411, 5, 4892, 17, 1433, 10, 451, 19, 3, 9, 1144, 13, 8, 3746, 26461, 2200, 3, 17037, 3201, 11, 4657, 30, 8, 11664, 11929, 2086, 7, 13, 8, 1038, 18178, 3, 10, 9064, 3734, 7, 3, 6, 3699, 5968, 21211, 3, 6, 411, 15, 75, 11697, 9, 3, 6, 6041, 3, 6, 7845, 3, 117, 13706, 3, 6, 11, 7552, 3, 23009, 6427, 3, 5, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.453667, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "She(O) is(O) a(O) member(O) of(O) the(O) Australian(B-organization) Antarctic(I-organization) Research(I-organization) Advisory(I-organization) Committee(I-organization) and(O) serves(O) on(O) the(O) Editorial(B-organization) Boards(I-organization) of(O) the(O) international(B-academic journal) journals(I-academic journal) :(O) Ecosystems(B-academic journal),(O) Global(B-academic journal) Change(I-academic journal) Biology(I-academic journal),(O) Oecologia(B-academic journal),(O) Plant(B-academic journal),(O) Cell(B-academic journal) ;(O) Environment(B-academic journal),(O) and(O) Tree(B-academic journal) Physiology(I-academic journal).(O)"}
{"id": "3", "dataset": "mit-movie", "split": "dev", "instance": {"id": "3", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: year, trailer, song, review, character, director, actor, plot, genre, rating, average ratings, title and O.\nSentence: what science fiction films have come out recently", "prompt_labels": "what(O) science(B-genre) fiction(I-genre) films(O) have(O) come(O) out(O) recently(B-year)", "words": ["what", "science", "fiction", "films", "have", "come", "out", "recently"], "labels": ["O", "B-genre", "I-genre", "O", "O", "O", "O", "B-year"]}, "label_list": ["year", "trailer", "song", "review", "character", "director", "actor", "plot", "genre", "rating", "average ratings", "title"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 215, 6, 6943, 6, 2324, 6, 1132, 6, 1848, 6, 2090, 6, 7556, 6, 5944, 6, 5349, 6, 5773, 6, 1348, 9712, 6, 2233, 11, 411, 5, 4892, 17, 1433, 10, 125, 2056, 8973, 4852, 43, 369, 91, 1310, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.4542, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "what(O) science(B-genre) fiction(I-genre) films(O) have(O) come(O) out(O) recently,(O)"}
{"id": "525", "dataset": "mit-movie", "split": "dev", "instance": {"id": "525", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: review, trailer, year, average ratings, plot, actor, genre, director, song, rating, title, character and O.\nSentence: find a horror movie with creepy little girls", "prompt_labels": "find(O) a(O) horror(B-genre) movie(O) with(O) creepy(B-plot) little(I-plot) girls(I-plot)", "words": ["find", "a", "horror", "movie", "with", "creepy", "little", "girls"], "labels": ["O", "O", "B-genre", "O", "O", "B-plot", "I-plot", "I-plot"]}, "label_list": ["review", "trailer", "year", "average ratings", "plot", "actor", "genre", "director", "song", "rating", "title", "character"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1132, 6, 6943, 6, 215, 6, 1348, 9712, 6, 5944, 6, 7556, 6, 5349, 6, 2090, 6, 2324, 6, 5773, 6, 2233, 6, 1848, 11, 411, 5, 4892, 17, 1433, 10, 253, 3, 9, 12082, 1974, 28, 17463, 63, 385, 3567, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.454654, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "find(O) a(O) horror(B-genre) movie(O) with(O) creepy(O) little(O) girls,(O)"}
{"id": "535", "dataset": "mit-movie", "split": "dev", "instance": {"id": "535", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: year, director, trailer, rating, title, actor, average ratings, review, song, genre, plot, character and O.\nSentence: show me the second star wars film", "prompt_labels": "show(O) me(O) the(O) second(O) star(B-title) wars(I-title) film(O)", "words": ["show", "me", "the", "second", "star", "wars", "film"], "labels": ["O", "O", "O", "O", "B-title", "I-title", "O"]}, "label_list": ["year", "director", "trailer", "rating", "title", "actor", "average ratings", "review", "song", "genre", "plot", "character"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 215, 6, 2090, 6, 6943, 6, 5773, 6, 2233, 6, 7556, 6, 1348, 9712, 6, 1132, 6, 2324, 6, 5349, 6, 5944, 6, 1848, 11, 411, 5, 4892, 17, 1433, 10, 504, 140, 8, 511, 2213, 615, 7, 814, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.455078, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "show(O) me(O) the(O) second(O) star(B-title) wars(I-title) film(O)"}
{"id": "880", "dataset": "mit-movie", "split": "dev", "instance": {"id": "880", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: review, trailer, average ratings, character, genre, title, director, plot, actor, song, year, rating and O.\nSentence: what movies from the 90s did jeremy irons star in", "prompt_labels": "what(O) movies(O) from(O) the(O) 90s(B-year) did(O) jeremy(B-actor) irons(I-actor) star(O) in(O)", "words": ["what", "movies", "from", "the", "90s", "did", "jeremy", "irons", "star", "in"], "labels": ["O", "O", "O", "O", "B-year", "O", "B-actor", "I-actor", "O", "O"]}, "label_list": ["review", "trailer", "average ratings", "character", "genre", "title", "director", "plot", "actor", "song", "year", "rating"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1132, 6, 6943, 6, 1348, 9712, 6, 1848, 6, 5349, 6, 2233, 6, 2090, 6, 5944, 6, 7556, 6, 2324, 6, 215, 6, 5773, 11, 411, 5, 4892, 17, 1433, 10, 125, 4876, 45, 8, 2777, 7, 410, 528, 60, 2258, 3575, 7, 2213, 16, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.449678, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "what(O) movies(O) from(O) the(O) 90s(B-year) did(O) jeremy(B-actor) irons(I-actor) star(O) in(O)"}
{"id": "997", "dataset": "mit-movie", "split": "dev", "instance": {"id": "997", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: average ratings, trailer, plot, director, song, title, rating, year, character, review, actor, genre and O.\nSentence: show me what films were directed by the wachowski brothers", "prompt_labels": "show(O) me(O) what(O) films(O) were(O) directed(O) by(O) the(O) wachowski(B-director) brothers(I-director)", "words": ["show", "me", "what", "films", "were", "directed", "by", "the", "wachowski", "brothers"], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "B-director", "I-director"]}, "label_list": ["average ratings", "trailer", "plot", "director", "song", "title", "rating", "year", "character", "review", "actor", "genre"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1348, 9712, 6, 6943, 6, 5944, 6, 2090, 6, 2324, 6, 2233, 6, 5773, 6, 215, 6, 1848, 6, 1132, 6, 7556, 6, 5349, 11, 411, 5, 4892, 17, 1433, 10, 504, 140, 125, 4852, 130, 6640, 57, 8, 3, 10674, 21180, 10740, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.451179, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "show(O) me(O) what(O) films(O) were(O) directed(O) by(O) the(O) wachowski(B-director) brothers(I-director)"}
{"id": "1144", "dataset": "mit-movie", "split": "dev", "instance": {"id": "1144", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: song, title, trailer, director, character, genre, actor, year, average ratings, plot, rating, review and O.\nSentence: did hal mohr direct a movie about gags in the 1950 s that was given six stars", "prompt_labels": "did(O) hal(B-director) mohr(I-director) direct(O) a(O) movie(O) about(O) gags(B-genre) in(O) the(O) 1950(B-year) s(I-year) that(O) was(O) given(O) six(B-average ratings) stars(I-average ratings)", "words": ["did", "hal", "mohr", "direct", "a", "movie", "about", "gags", "in", "the", "1950", "s", "that", "was", "given", "six", "stars"], "labels": ["O", "B-director", "I-director", "O", "O", "O", "O", "B-genre", "O", "O", "B-year", "I-year", "O", "O", "O", "B-average ratings", "I-average ratings"]}, "label_list": ["song", "title", "trailer", "director", "character", "genre", "actor", "year", "average ratings", "plot", "rating", "review"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2324, 6, 2233, 6, 6943, 6, 2090, 6, 1848, 6, 5349, 6, 7556, 6, 215, 6, 1348, 9712, 6, 5944, 6, 5773, 6, 1132, 11, 411, 5, 4892, 17, 1433, 10, 410, 3, 3828, 2288, 107, 52, 1223, 3, 9, 1974, 81, 23856, 7, 16, 8, 10247, 3, 7, 24, 47, 787, 1296, 4811, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.451726, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "did(O) hal(B-director) mohr(I-director) direct(O) a(O) movie(O) about(O) gags(B-plot) in(O) the(O) 1950(B-year) s(I-year) that(O) was(O) given(O) six(B-average ratings) stars(I-average ratings)"}
{"id": "1168", "dataset": "mit-movie", "split": "dev", "instance": {"id": "1168", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: review, actor, year, title, song, average ratings, plot, genre, director, character, trailer, rating and O.\nSentence: did stanley kubrick ever direct any romantic comedy films", "prompt_labels": "did(O) stanley(B-director) kubrick(I-director) ever(O) direct(O) any(O) romantic(B-genre) comedy(I-genre) films(O)", "words": ["did", "stanley", "kubrick", "ever", "direct", "any", "romantic", "comedy", "films"], "labels": ["O", "B-director", "I-director", "O", "O", "O", "B-genre", "I-genre", "O"]}, "label_list": ["review", "actor", "year", "title", "song", "average ratings", "plot", "genre", "director", "character", "trailer", "rating"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1132, 6, 7556, 6, 215, 6, 2233, 6, 2324, 6, 1348, 9712, 6, 5944, 6, 5349, 6, 2090, 6, 1848, 6, 6943, 6, 5773, 11, 411, 5, 4892, 17, 1433, 10, 410, 3, 5627, 1306, 3, 2729, 115, 5206, 664, 1223, 136, 7966, 12373, 4852, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.452214, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "did(O) stanley(B-director) kubrick(I-director) ever(O) direct(O) any(O) romantic(B-genre) comedy(I-genre) films,(O)"}
{"id": "1225", "dataset": "mit-movie", "split": "dev", "instance": {"id": "1225", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: director, character, genre, rating, trailer, song, year, average ratings, plot, title, review, actor and O.\nSentence: do you think youd be able to help me find the penguins of madagascar operation dvd premier", "prompt_labels": "do(O) you(O) think(O) youd(O) be(O) able(O) to(O) help(O) me(O) find(O) the(B-title) penguins(I-title) of(I-title) madagascar(I-title) operation(I-title) dvd(I-title) premier(I-title)", "words": ["do", "you", "think", "youd", "be", "able", "to", "help", "me", "find", "the", "penguins", "of", "madagascar", "operation", "dvd", "premier"], "labels": ["O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "B-title", "I-title", "I-title", "I-title", "I-title", "I-title", "I-title"]}, "label_list": ["director", "character", "genre", "rating", "trailer", "song", "year", "average ratings", "plot", "title", "review", "actor"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2090, 6, 1848, 6, 5349, 6, 5773, 6, 6943, 6, 2324, 6, 215, 6, 1348, 9712, 6, 5944, 6, 2233, 6, 1132, 6, 7556, 11, 411, 5, 4892, 17, 1433, 10, 103, 25, 317, 25, 26, 36, 3, 179, 12, 199, 140, 253, 8, 4550, 17996, 7, 13, 11454, 4711, 7, 1720, 2986, 30114, 2761, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.452757, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "do(O) you(O) think(O) youd(O) be(O) able(O) to(O) help(O) me(O) find(O) the(O) penguins(B-character) of(I-character) madagascar(I-character) operation(I-character) dvd(B-trailer) premier(I-trailer)"}
{"id": "1655", "dataset": "mit-movie", "split": "dev", "instance": {"id": "1655", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: average ratings, song, plot, review, title, director, trailer, actor, genre, character, rating, year and O.\nSentence: list all g rated movies about a road trip that received an average rating", "prompt_labels": "list(O) all(O) g(B-rating) rated(O) movies(O) about(O) a(O) road(B-plot) trip(I-plot) that(O) received(O) an(O) average(B-average ratings) rating(O)", "words": ["list", "all", "g", "rated", "movies", "about", "a", "road", "trip", "that", "received", "an", "average", "rating"], "labels": ["O", "O", "B-rating", "O", "O", "O", "O", "B-plot", "I-plot", "O", "O", "O", "B-average ratings", "O"]}, "label_list": ["average ratings", "song", "plot", "review", "title", "director", "trailer", "actor", "genre", "character", "rating", "year"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 1348, 9712, 6, 2324, 6, 5944, 6, 1132, 6, 2233, 6, 2090, 6, 6943, 6, 7556, 6, 5349, 6, 1848, 6, 5773, 6, 215, 11, 411, 5, 4892, 17, 1433, 10, 570, 66, 3, 122, 3, 4094, 4876, 81, 3, 9, 1373, 1469, 24, 1204, 46, 1348, 5773, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.453262, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "list(O) all(O) g(B-average ratings) rated(I-average ratings) movies(O) about(O) a(O) road(B-genre) trip(I-genre) that(O) received(O) an(O) average(B-average ratings) rating(I-average ratings)"}
{"id": "2311", "dataset": "mit-movie", "split": "dev", "instance": {"id": "2311", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: song, genre, review, title, year, average ratings, director, actor, character, plot, rating, trailer and O.\nSentence: who is in the movie spanglish", "prompt_labels": "who(O) is(O) in(O) the(O) movie(O) spanglish(B-title)", "words": ["who", "is", "in", "the", "movie", "spanglish"], "labels": ["O", "O", "O", "O", "O", "B-title"]}, "label_list": ["song", "genre", "review", "title", "year", "average ratings", "director", "actor", "character", "plot", "rating", "trailer"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 2324, 6, 5349, 6, 1132, 6, 2233, 6, 215, 6, 1348, 9712, 6, 2090, 6, 7556, 6, 1848, 6, 5944, 6, 5773, 6, 6943, 11, 411, 5, 4892, 17, 1433, 10, 113, 19, 16, 8, 1974, 8438, 4707, 7, 107, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.453714, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "who(O) is(O) in(O) the(O) movie(O) spanglish(B-title)"}
{"id": "39", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "39", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Price, Amenity, Restaurant Name, Hours, Cuisine, Rating, Location, Dish and O.\nSentence: are there any fine dining options within 5 miles of my location", "prompt_labels": "are(O) there(O) any(O) fine(B-Amenity) dining(I-Amenity) options(O) within(B-Location) 5(I-Location) miles(I-Location) of(O) my(O) location(O)", "words": ["are", "there", "any", "fine", "dining", "options", "within", "5", "miles", "of", "my", "location"], "labels": ["O", "O", "O", "B-Amenity", "I-Amenity", "O", "B-Location", "I-Location", "I-Location", "O", "O", "O"]}, "label_list": ["Price", "Amenity", "Restaurant Name", "Hours", "Cuisine", "Rating", "Location", "Dish"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 5312, 6, 736, 35, 485, 6, 6233, 5570, 6, 10768, 7, 6, 23406, 6, 21662, 6, 10450, 6, 2678, 107, 11, 411, 5, 4892, 17, 1433, 10, 33, 132, 136, 1399, 2851, 931, 441, 305, 2286, 13, 82, 1128, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.454251, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "are(O) there(O) any(O) fine(O) dining(O) options(O) within(O) 5(B-Location) miles(I-Location) of(O) my(O) location(O)"}
{"id": "352", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "352", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Restaurant Name, Amenity, Hours, Price, Rating, Location, Dish, Cuisine and O.\nSentence: find an inexpensive mexican restaurant in the area", "prompt_labels": "find(O) an(O) inexpensive(B-Price) mexican(B-Cuisine) restaurant(O) in(B-Location) the(I-Location) area(I-Location)", "words": ["find", "an", "inexpensive", "mexican", "restaurant", "in", "the", "area"], "labels": ["O", "O", "B-Price", "B-Cuisine", "O", "B-Location", "I-Location", "I-Location"]}, "label_list": ["Restaurant Name", "Amenity", "Hours", "Price", "Rating", "Location", "Dish", "Cuisine"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 6233, 5570, 6, 736, 35, 485, 6, 10768, 7, 6, 5312, 6, 21662, 6, 10450, 6, 2678, 107, 6, 23406, 11, 411, 5, 4892, 17, 1433, 10, 253, 46, 13938, 140, 226, 23, 1608, 2062, 16, 8, 616, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.454709, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "find(O) an(O) inexpensive(B-Price) mexican(B-Cuisine) restaurant(O) in(O) the(O) area,(O)"}
{"id": "438", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "438", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Rating, Restaurant Name, Cuisine, Price, Amenity, Hours, Location, Dish and O.\nSentence: find me the phone number to dominos pizza", "prompt_labels": "find(O) me(O) the(O) phone(O) number(O) to(O) dominos(B-Restaurant Name) pizza(I-Restaurant Name)", "words": ["find", "me", "the", "phone", "number", "to", "dominos", "pizza"], "labels": ["O", "O", "O", "O", "O", "O", "B-Restaurant Name", "I-Restaurant Name"]}, "label_list": ["Rating", "Restaurant Name", "Cuisine", "Price", "Amenity", "Hours", "Location", "Dish"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 21662, 6, 6233, 5570, 6, 23406, 6, 5312, 6, 736, 35, 485, 6, 10768, 7, 6, 10450, 6, 2678, 107, 11, 411, 5, 4892, 17, 1433, 10, 253, 140, 8, 951, 381, 12, 10138, 32, 7, 6871, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.455158, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "find(O) me(O) the(O) phone(O) number(O) to(O) dominos(B-Restaurant Name) pizza(I-Restaurant Name)"}
{"id": "526", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "526", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Rating, Price, Amenity, Dish, Restaurant Name, Location, Cuisine, Hours and O.\nSentence: how many burger kings are around", "prompt_labels": "how(O) many(O) burger(B-Restaurant Name) kings(I-Restaurant Name) are(O) around(B-Location)", "words": ["how", "many", "burger", "kings", "are", "around"], "labels": ["O", "O", "B-Restaurant Name", "I-Restaurant Name", "O", "B-Location"]}, "label_list": ["Rating", "Price", "Amenity", "Dish", "Restaurant Name", "Location", "Cuisine", "Hours"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 21662, 6, 5312, 6, 736, 35, 485, 6, 2678, 107, 6, 6233, 5570, 6, 10450, 6, 23406, 6, 10768, 7, 11, 411, 5, 4892, 17, 1433, 10, 149, 186, 3, 9079, 3, 1765, 7, 33, 300, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.455637, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "how(O) many(O) burger(B-Dish) kings(I-Dish) are(O) around(O)"}
{"id": "837", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "837", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Amenity, Restaurant Name, Rating, Price, Cuisine, Dish, Location, Hours and O.\nSentence: is there a nicely decorated restaurant in sacramento with a fireplace", "prompt_labels": "is(O) there(O) a(O) nicely(B-Amenity) decorated(I-Amenity) restaurant(O) in(O) sacramento(B-Location) with(O) a(O) fireplace(B-Amenity)", "words": ["is", "there", "a", "nicely", "decorated", "restaurant", "in", "sacramento", "with", "a", "fireplace"], "labels": ["O", "O", "O", "B-Amenity", "I-Amenity", "O", "O", "B-Location", "O", "O", "B-Amenity"]}, "label_list": ["Amenity", "Restaurant Name", "Rating", "Price", "Cuisine", "Dish", "Location", "Hours"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 736, 35, 485, 6, 6233, 5570, 6, 21662, 6, 5312, 6, 23406, 6, 2678, 107, 6, 10450, 6, 10768, 7, 11, 411, 5, 4892, 17, 1433, 10, 19, 132, 3, 9, 11040, 13264, 2062, 16, 3, 7, 9, 2935, 297, 32, 28, 3, 9, 9610, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.456122, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "is(O) there(O) a(O) nicely(O) decorated(O) restaurant(O) in(O) sacramento(B-Location) with(O) a(O) fireplace(B-Amenity)"}
{"id": "1038", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "1038", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Location, Restaurant Name, Rating, Dish, Cuisine, Hours, Amenity, Price and O.\nSentence: please show me some reviews about the sushi place", "prompt_labels": "please(O) show(O) me(O) some(O) reviews(O) about(O) the(O) sushi(B-Cuisine) place(B-Location)", "words": ["please", "show", "me", "some", "reviews", "about", "the", "sushi", "place"], "labels": ["O", "O", "O", "O", "O", "O", "O", "B-Cuisine", "B-Location"]}, "label_list": ["Location", "Restaurant Name", "Rating", "Dish", "Cuisine", "Hours", "Amenity", "Price"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 10450, 6, 6233, 5570, 6, 21662, 6, 2678, 107, 6, 23406, 6, 10768, 7, 6, 736, 35, 485, 6, 5312, 11, 411, 5, 4892, 17, 1433, 10, 754, 504, 140, 128, 2456, 81, 8, 26297, 286, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.456581, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "please(O) show(O) me(O) some(O) reviews(B-Rating) about(O) the(O) sushi(B-Dish) place(O)"}
{"id": "1115", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "1115", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Price, Restaurant Name, Location, Rating, Amenity, Hours, Dish, Cuisine and O.\nSentence: what is the average mealcost for townline pizza in my city", "prompt_labels": "what(O) is(O) the(O) average(O) mealcost(O) for(O) townline(B-Restaurant Name) pizza(I-Restaurant Name) in(B-Location) my(I-Location) city(I-Location)", "words": ["what", "is", "the", "average", "mealcost", "for", "townline", "pizza", "in", "my", "city"], "labels": ["O", "O", "O", "O", "O", "O", "B-Restaurant Name", "I-Restaurant Name", "B-Location", "I-Location", "I-Location"]}, "label_list": ["Price", "Restaurant Name", "Location", "Rating", "Amenity", "Hours", "Dish", "Cuisine"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 5312, 6, 6233, 5570, 6, 10450, 6, 21662, 6, 736, 35, 485, 6, 10768, 7, 6, 2678, 107, 6, 23406, 11, 411, 5, 4892, 17, 1433, 10, 125, 19, 8, 1348, 3506, 11290, 21, 1511, 747, 6871, 16, 82, 690, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.457033, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "what(O) is(O) the(O) average(O) mealcost(O) for(O) townline(B-Restaurant Name) pizza(I-Restaurant Name) in(O) my(O) city(B-Location)"}
{"id": "1145", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "1145", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Location, Amenity, Dish, Price, Rating, Hours, Restaurant Name, Cuisine and O.\nSentence: what is the phone number of bills pizza", "prompt_labels": "what(O) is(O) the(O) phone(O) number(O) of(O) bills(B-Restaurant Name) pizza(I-Restaurant Name)", "words": ["what", "is", "the", "phone", "number", "of", "bills", "pizza"], "labels": ["O", "O", "O", "O", "O", "O", "B-Restaurant Name", "I-Restaurant Name"]}, "label_list": ["Location", "Amenity", "Dish", "Price", "Rating", "Hours", "Restaurant Name", "Cuisine"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 10450, 6, 736, 35, 485, 6, 2678, 107, 6, 5312, 6, 21662, 6, 10768, 7, 6, 6233, 5570, 6, 23406, 11, 411, 5, 4892, 17, 1433, 10, 125, 19, 8, 951, 381, 13, 7200, 6871, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.457456, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "what(O) is(O) the(O) phone(O) number(O) of(O) bills(O) pizza(B-Dish)"}
{"id": "1464", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "1464", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Cuisine, Hours, Dish, Price, Amenity, Restaurant Name, Location, Rating and O.\nSentence: wheres a kid friendly diner thats within an hour of here", "prompt_labels": "wheres(O) a(O) kid(B-Amenity) friendly(I-Amenity) diner(B-Cuisine) thats(O) within(B-Location) an(O) hour(B-Location) of(I-Location) here(I-Location)", "words": ["wheres", "a", "kid", "friendly", "diner", "thats", "within", "an", "hour", "of", "here"], "labels": ["O", "O", "B-Amenity", "I-Amenity", "B-Cuisine", "O", "B-Location", "O", "B-Location", "I-Location", "I-Location"]}, "label_list": ["Cuisine", "Hours", "Dish", "Price", "Amenity", "Restaurant Name", "Location", "Rating"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 23406, 6, 10768, 7, 6, 2678, 107, 6, 5312, 6, 736, 35, 485, 6, 6233, 5570, 6, 10450, 6, 21662, 11, 411, 5, 4892, 17, 1433, 10, 213, 7, 3, 9, 4984, 2609, 176, 49, 24, 7, 441, 46, 1781, 13, 270, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.457913, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "wheres(O) a(O) kid(B-Amenity) friendly(I-Amenity) diner(I-Amenity) thats(O) within(O) an(O) hour(O) of(O) here(O)"}
{"id": "1466", "dataset": "mit-restaurant", "split": "dev", "instance": {"id": "1466", "instruction_inputs": "Please analyze the sentence provided, identifying the type of entity for each word on a token-by-token basis.\nOutput format is: word_1(label_1), word_2(label_2), ...\nWe'll use the BIO-format to label the entities, where:\n1. B- (Begin) indicates the start of a named entity.\n2. I- (Inside) is used for words within a named entity but are not the first word.\n3. O (Outside) denotes words that are not part of a named entity.\n\nUse the specific entity tags: Rating, Dish, Hours, Amenity, Restaurant Name, Cuisine, Price, Location and O.\nSentence: wheres papa johns", "prompt_labels": "wheres(O) papa(B-Restaurant Name) johns(I-Restaurant Name)", "words": ["wheres", "papa", "johns"], "labels": ["O", "B-Restaurant Name", "I-Restaurant Name"]}, "label_list": ["Rating", "Dish", "Hours", "Amenity", "Restaurant Name", "Cuisine", "Price", "Location"], "input_ids": [863, 8341, 8, 7142, 937, 6, 3, 9690, 8, 686, 13, 10409, 21, 284, 1448, 30, 3, 9, 14145, 18, 969, 18, 235, 2217, 1873, 5, 3387, 2562, 1910, 19, 10, 1448, 834, 536, 599, 40, 10333, 834, 6982, 6, 1448, 834, 357, 599, 40, 10333, 834, 7318, 6, 3, 233, 101, 31, 195, 169, 8, 23112, 18, 8995, 12, 3783, 8, 12311, 6, 213, 10, 1300, 272, 18, 41, 2703, 122, 77, 61, 9379, 8, 456, 13, 3, 9, 2650, 10409, 5, 1682, 27, 18, 41, 1570, 1583, 61, 19, 261, 21, 1234, 441, 3, 9, 2650, 10409, 68, 33, 59, 8, 166, 1448, 5, 1877, 411, 41, 15767, 1583, 61, 20, 7977, 7, 1234, 24, 33, 59, 294, 13, 3, 9, 2650, 10409, 5, 2048, 8, 806, 10409, 12391, 10, 21662, 6, 2678, 107, 6, 10768, 7, 6, 736, 35, 485, 6, 6233, 5570, 6, 23406, 6, 5312, 6, 10450, 11, 411, 5, 4892, 17, 1433, 10, 213, 7, 22250, 3, 27341, 7, 1], "attention_mask": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "time_stamp": 1740069229.458334, "tokenizer_name": "dyyyyyyyy/GNER-T5-base", "prediction": "wheres(O) papa(B-Restaurant Name) johns(I-Restaurant Name)"}
